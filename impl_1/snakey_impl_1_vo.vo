
// Verilog netlist produced by program backanno, Version Radiant Software (64-bit) 2023.1.0.43.3

// backanno -o snakey_impl_1_vo.vo -sp High-Performance_1.2V -w -neg -gui snakey_impl_1.udb 
// Netlist created on Thu Dec  7 03:43:50 2023
// Netlist written on Thu Dec  7 03:43:55 2023
// Design is for device iCE40UP5K
// Design is for package SG48
// Design is for performance grade High-Performance_1.2V

`timescale 1 ns / 1 ps

module top ( data, clk_in_12m, clock, latch, rgb_out, VSYNC_out, HSYNC_out );
  input  data, clk_in_12m;
  output clock, latch;
  output [5:0] rgb_out;
  output VSYNC_out, HSYNC_out;
  wire   \myvga.row_9__N_1[9] , \myvga.n5650 , \myvga.n4078 , \row[9] , 
         row_0__N_29, row_0__N_30, clk_25m, \myvga.row_9__N_1[8] , 
         \myvga.row_9__N_1[7] , \myvga.n5647 , \row[8] , \myvga.n4076 , 
         \row[7] , \myvga.column_9__N_31[0] , \myvga.n5602 , \column[0] , 
         VCC_net, \myvga.column_0__N_50 , \myvga.n4059 , \myvga.row_9__N_1[6] , 
         \myvga.row_9__N_1[5] , \myvga.n5644 , \row[6] , \myvga.n4074 , 
         \row[5] , \myvga.row_9__N_1[4] , \myvga.row_9__N_1[3] , \myvga.n5641 , 
         \row[4] , \myvga.n4072 , \row[3] , \myvga.row_9__N_1[2] , 
         \myvga.row_9__N_1[1] , \myvga.n5638 , \row[2] , \myvga.n4070 , 
         \row[1] , \myvga.row_9__N_1[0] , \myvga.n5569 , \myvga.n4599 , 
         \row[0] , \myvga.column_9__N_31[9] , \myvga.n5626 , \myvga.n4067 , 
         \column[9] , \myvga.column_9__N_31[8] , \myvga.column_9__N_31[7] , 
         \myvga.n5623 , \column[8] , \myvga.n4065 , \column[7] , 
         \myvga.column_9__N_31[6] , \myvga.column_9__N_31[5] , \myvga.n5620 , 
         \column[6] , \myvga.n4063 , \column[5] , \myvga.column_9__N_31[4] , 
         \myvga.column_9__N_31[3] , \myvga.n5617 , \column[4] , \myvga.n4061 , 
         \column[3] , \myvga.column_9__N_31[2] , \myvga.column_9__N_31[1] , 
         \myvga.n5614 , \column[2] , \column[1] , 
         \controller.counter_20__N_199[14] , 
         \controller.counter_20__N_199[13] , \controller.n5596 , 
         \controller.counter[14] , \controller.n4049 , 
         \controller.counter[13] , \controller.counter_2__N_236 , 
         \controller.n4051 , \controller.counter_20__N_199[2] , 
         \controller.counter_20__N_199[1] , \controller.n5551 , 
         \controller.counter[2] , \controller.n4037 , \controller.n20 , 
         \controller.n4039 , \controller.counter_20__N_199[16] , 
         \controller.counter_20__N_199[15] , \controller.n5599 , 
         \controller.counter[16] , \controller.counter[15] , 
         \controller.n4053 , \controller.counter_20__N_199[12] , 
         \controller.counter_20__N_199[11] , \controller.n5566 , 
         \controller.counter[12] , \controller.n4047 , 
         \controller.counter[11] , \controller.counter_20__N_199[0] , 
         \controller.n5548 , \controller.n21 , 
         \controller.counter_20__N_199[18] , 
         \controller.counter_20__N_199[17] , \controller.n5605 , 
         \controller.counter[18] , \controller.counter[17] , 
         \controller.n4055 , \controller.counter_20__N_199[10] , 
         \controller.counter_20__N_199[9] , \controller.n5563 , 
         \controller.counter[10] , \controller.n4045 , \controller.counter[9] , 
         \controller.counter_20__N_199[8] , \controller.counter_20__N_199[7] , 
         \controller.n5560 , \controller.counter[8] , \controller.n4043 , 
         \controller.counter[7] , \controller.counter_20__N_199[6] , 
         \controller.counter_20__N_199[5] , \controller.n5557 , 
         \controller.counter[6] , \controller.n4041 , \controller.counter[5] , 
         \controller.counter_20__N_199[20] , 
         \controller.counter_20__N_199[19] , \controller.n5608 , 
         \controller.counter[20] , \controller.counter[19] , 
         \controller.counter_20__N_199[4] , \controller.counter_20__N_199[3] , 
         \controller.n5554 , \controller.counter[4] , \controller.counter[3] , 
         \gamelogic.n5590 , \gamelogic.r_addy_11__N_110[5] , 
         \gamelogic.snake_y[2] , \gamelogic.r_addy_7__N_134 , 
         \gamelogic.snake_y[1] , \r_addy[7] , \r_addy[8] , 
         \gamelogic.r_addy_9__N_122 , \gamelogic.n5587 , 
         \gamelogic.r_addy_6__N_139 , \snake_y[0] , \r_addy[6] , 
         \gamelogic.n5635 , \gamelogic.n4085 , \gamelogic.counterx[5] , 
         \gamelogic.n256 , \gamelogic.n255 , \gamelogic.n5632 , 
         \gamelogic.counterx[4] , \gamelogic.n4083 , \gamelogic.counterx[3] , 
         \gamelogic.n258 , \gamelogic.n257 , \gamelogic.counterx_2__N_273 , 
         \gamelogic.counterx_1__N_274 , \gamelogic.n5629 , 
         \gamelogic.counterx[2] , \gamelogic.n4081 , \gamelogic.counterx[1] , 
         clk_60hz, \gamelogic.counterx_0__N_275 , \gamelogic.n5572 , 
         \gamelogic.counterx[0] , \gamelogic.n5584 , 
         \gamelogic.r_addy_5__N_144 , \gamelogic.r_addy_5__N_143[5] , 
         \gamelogic.snake_x[5] , \r_addy[5] , \gamelogic.n5581 , 
         \gamelogic.snake_x[4] , \gamelogic.r_addy_3__N_155 , 
         \gamelogic.snake_x[3] , \r_addy[3] , \r_addy[4] , \gamelogic.n5578 , 
         \snake_x[2] , \gamelogic.r_addy_1__N_167 , \snake_x[1] , \r_addy[1] , 
         \r_addy[2] , \gamelogic.n5575 , \gamelogic.r_addy_0__N_172 , 
         \snake_x[0] , \r_addy[0] , \gamelogic.n5611 , 
         \gamelogic.r_addy_11__N_111 , \gamelogic.r_addy[11]_2 , 
         \gamelogic.n5593 , \gamelogic.snake_y[4] , \gamelogic.snake_y[3] , 
         \gamelogic.r_addy[9]_2 , \gamelogic.r_addy[10]_2 , 
         \print_pat.rgb_5__N_63[1] , \print_pat.rgb_0__N_78 , 
         \print_pat.make_start_screen[1] , \result[1] , \result[0] , 
         \print_pat.n589 , \print_pat.make_start_screen[0] , \print_pat.n10 , 
         \print_pat.rgb_0__N_79 , r_addr_0__N_198, \rgb[0] , \rgb[1] , 
         \print_pat.rgb_5__N_63[3] , \print_pat.rgb_5__N_63[2] , 
         \print_pat.make_start_screen[3] , \print_pat.n591 , \print_pat.n590 , 
         \print_pat.make_start_screen[2] , \rgb[2] , \rgb[3] , 
         \print_pat.rgb_5__N_63[5] , \print_pat.rgb_5__N_63[4] , 
         \print_pat.make_start_screen[5] , \print_pat.n593 , \print_pat.n592 , 
         \print_pat.make_start_screen[4] , \rgb[4] , \rgb[5] , hsync_N_292, 
         \print_pat.snake_dumpy.draw_dumpy_5__N_186 , n3007, n4, 
         \print_pat.draw_dumpy[5] , hsync, 
         \controller.controllerOutput_7__N_51[1] , 
         \controller.controllerOutput_7__N_51[0] , \controller.shift[1] , 
         \controller.shift[0] , \controller.controllerOutput_0__N_62 , 
         \controllerOutput[0] , \controllerOutput[1] , 
         \controller.shift[1].sig_007.FeedThruLUT , 
         \controller.shift[0].sig_000.FeedThruLUT , 
         \controller.interimShift_0__N_244 , \controller.interimShift[0] , 
         \controller.interimShift[1] , 
         \controller.shift[6].sig_002.FeedThruLUT , 
         \controller.shift[7].sig_001.FeedThruLUT , \controller.shift[6] , 
         \controller.shift[7] , \controller.interimShift[7] , 
         \controller.interimShift[6] , 
         \controller.shift[4].sig_004.FeedThruLUT , 
         \controller.shift[5].sig_003.FeedThruLUT , \controller.shift[4] , 
         \controller.shift[5] , \controller.interimShift[5] , 
         \controller.interimShift[4] , 
         \controller.shift[2].sig_006.FeedThruLUT , 
         \controller.shift[3].sig_005.FeedThruLUT , \controller.shift[2] , 
         \controller.shift[3] , \controller.interimShift[3] , 
         \controller.interimShift[2] , 
         \controller.controllerOutput_7__N_51[5] , 
         \controller.controllerOutput_7__N_51[7] , \controllerOutput[7] , 
         \controllerOutput[5] , \controller.controllerOutput_7__N_51[2] , 
         \controller.controllerOutput_7__N_51[3] , \controllerOutput[3] , 
         \controllerOutput[2] , \controller.shift[4].sig_010.FeedThruLUT , 
         \controller.shift[5].sig_009.FeedThruLUT , clock_c, 
         \controller.shift[2].sig_012.FeedThruLUT , 
         \controller.shift[3].sig_011.FeedThruLUT , 
         \controller.shift[0].sig_014.FeedThruLUT , 
         \controller.shift[1].sig_013.FeedThruLUT , 
         \gamelogic.countery_4__N_276[1] , \gamelogic.countery_0__N_280 , 
         \gamelogic.n377 , \gamelogic.countery[1] , \gamelogic.countery[0] , 
         \gamelogic.w_addr_10__N_82[1] , \gamelogic.w_addr_10__N_82[0] , 
         \gamelogic.n261[1] , w_data_1__N_106, \gamelogic.n261[0] , 
         \gamelogic.w_data_1__N_105 , \w_addr[0] , \w_addr[1] , 
         \gamelogic.snake_y_2__N_263 , \gamelogic.snake_y_1__N_266[1] , 
         \gamelogic.n19 , \gamelogic.n4766 , \gamelogic.n5421 , 
         \gamelogic.n166 , \gamelogic.n4580 , snake_y_1__N_267, 
         snake_y_1__N_268, \gamelogic.snake_y_4__N_257 , 
         \gamelogic.snake_y_3__N_260 , \gamelogic.n4776 , \gamelogic.n4560 , 
         \gamelogic.n4768 , \gamelogic.snake_x_4__N_248[4] , 
         \gamelogic.snake_x_4__N_248[3] , snake_x_3__N_253, 
         \gamelogic.snake_x_5__N_245 , \gamelogic.game_over_check_N_294 , 
         \gamelogic.n3282 , \gamelogic.game_over_check_N_295 , 
         \gamelogic.game_over_check_N_296 , game_over_check, w_data_0__N_107, 
         n4594, \w_data[0] , \gamelogic.w_addr_10__N_82[10] , 
         \gamelogic.n261[10] , \w_addr[10] , \gamelogic.w_addr_10__N_82[8] , 
         \gamelogic.w_addr_10__N_82[9] , \gamelogic.n261[8] , 
         \gamelogic.n261[9] , \w_addr[9] , \w_addr[8] , 
         \gamelogic.w_addr_10__N_82[6] , \gamelogic.w_addr_10__N_82[7] , 
         \gamelogic.n261[6] , \gamelogic.n261[7] , \w_addr[7] , \w_addr[6] , 
         \gamelogic.w_addr_10__N_82[4] , \gamelogic.w_addr_10__N_82[5] , 
         \gamelogic.n261[4] , \gamelogic.n261[5] , \w_addr[5] , \w_addr[4] , 
         \gamelogic.w_addr_10__N_82[2] , \gamelogic.w_addr_10__N_82[3] , 
         \gamelogic.n261[2] , \gamelogic.n261[3] , \w_addr[3] , \w_addr[2] , 
         \gamelogic.countery_4__N_276[2] , \gamelogic.countery_4__N_276[3] , 
         \gamelogic.countery[2] , \gamelogic.n702 , \gamelogic.n4018 , 
         \gamelogic.countery[3] , \gamelogic.counterx_3__N_272 , 
         \gamelogic.counterx_5__N_270[4] , snake_x_1__N_255, snake_x_0__N_256, 
         \print_pat.ram_mod.r_data_out_1__N_177 , 
         \print_pat.ram_mod.r_data_out_0__N_182 , 
         \print_pat.ram_mod.r_data_out_1__N_178 , 
         \print_pat.color_snake_alive[0] , \print_pat.color_apple[0] , 
         \r_data_out[1] , \r_data_out[0] , \print_pat.n536[0] , 
         \print_pat.make_end_screen[0] , \print_pat.n13 , \print_pat.n587 , 
         \r_data_out[2] , \print_pat.r_addr[5] , \myvga.n4746 , \myvga.n3688 , 
         n4320, \print_pat.ram_mod.r_data_out_2__N_174 , 
         \print_pat.ram_mod.r_data_out_2__N_175 , 
         \print_pat.ram_mod.r_data_out_0__N_181 , 
         \print_pat.ram_mod.r_data_out_0__N_180 , \print_pat.n2868 , 
         \gamelogic.n4748 , \gamelogic.n10 , \gamelogic.counter[1] , 
         \gamelogic.counter[0] , \gamelogic.counter[2] , \gamelogic.n3574 , 
         \gamelogic.counter[4] , \gamelogic.counter[3] , \print_pat.n5 , 
         \print_pat.n4899 , \print_pat.make_end_screen[1] , 
         \print_pat.color_apple[1] , \print_pat.color_snake_alive[1] , 
         \print_pat.n5_adj_301 , \fsm_control.result_0__N_184 , \s[0] , \s[1] , 
         \fsm_control.result_0__N_185 , \print_pat.n5_adj_300 , 
         \print_pat.n4566 , \print_pat.n2854 , 
         \print_pat.color_snake_alive[5] , \print_pat.color_apple[5] , 
         \print_pat.n505[5] , \print_pat.color_snake_alive[3] , 
         \print_pat.color_apple[3] , \print_pat.n536[3] , \print_pat.n3012 , 
         \print_pat.n3088 , \print_pat.make_end_screen[4] , \print_pat.n2856 , 
         \print_pat.color_snake_alive[4] , \print_pat.color_apple[4] , 
         \print_pat.make_end_screen[2] , \print_pat.n2858 , 
         \print_pat.color_snake_alive[2] , \print_pat.color_apple[2] , vsync, 
         \myvga.n4928 , \myvga.n4929 , \myvga.n1 , \myvga.n3442 , \myvga.n8 , 
         \myvga.n15 , \myvga.n12 , \myvga.n3641 , \myvga.n14 , \myvga.n10 , 
         \myvga.n4756 , \myvga.clk_60hz_N_290 , \myvga.clk_60hz_N_291 , 
         \myvga.n10_adj_299 , \myvga.n7 , \controller.n28 , \controller.n3001 , 
         \controller.n4583 , \controller.n36 , \controller.n9_adj_298 , 
         \controller.n4582 , \controller.n10_adj_297 , 
         \controller.latch_c_N_288 , \controller.shift[6].sig_008.FeedThruLUT , 
         \controller.n12 , \controller.n11 , \controller.n9 , \controller.n10 , 
         \controller.latch_c_N_287 , latch_c, \controller.clock_c_N_289 , 
         \gamelogic.n191 , \gamelogic.n3627 , \gamelogic.dir[1] , 
         \gamelogic.dir[0] , \gamelogic.n2795 , \gamelogic.n31 , 
         \gamelogic.dir_1__N_281 , n4591, \gamelogic.n372 , \gamelogic.n209 , 
         \gamelogic.n373 , \gamelogic.n206 , \gamelogic.n4326 , 
         \gamelogic.countery[4] , \snake_y_1__N_267$n0 , \w_data[1] , 
         \r_addr[10] , \gamelogic.dir_0__N_283 , 
         \print_pat.make_end_screen[3] , \print_pat.make_end_screen[5] , 
         result_1__N_183, n7, snake_x_2__N_254, \print_pat.r_addr[8] , 
         \print_pat.r_addr[7] , \print_pat.r_addr[6] , \print_pat.r_addr[4] , 
         \print_pat.r_addr[3] , \print_pat.r_addr[2] , \print_pat.r_addr[1] , 
         \print_pat.r_addr[0] , \myvga.vsync_N_293 , 
         \gamelogic.counterx_5__N_270[5] , \r_addr[11] , snake_y_0__N_269, 
         \gamelogic.countery_4__N_276[4] , \gamelogic.w_addr_11__N_81 , 
         \w_addr[11] , n674, \r_addr[9] , \gamelogic.dir_0__N_282[0] , 
         s_1__N_284, \fsm_control.s_0__N_286 , \fsm_control.s_0__N_285[0] , 
         rgb_out_c_5, rgb_out_c_0, clk_in_12m_c, 
         \pll.lscc_pll_inst.feedback_w , rgb_out_c_1, rgb_out_c_2, rgb_out_c_3, 
         rgb_out_c_4, HSYNC_out_c, data_c, VSYNC_out_c;

  myvga_SLICE_0 \myvga.SLICE_0 ( .DI0(\myvga.row_9__N_1[9] ), 
    .D1(\myvga.n5650 ), .D0(\myvga.n4078 ), .B0(\row[9] ), .CE(row_0__N_29), 
    .LSR(row_0__N_30), .CLK(clk_25m), .CIN0(\myvga.n4078 ), 
    .CIN1(\myvga.n5650 ), .Q0(\row[9] ), .F0(\myvga.row_9__N_1[9] ), 
    .COUT0(\myvga.n5650 ));
  myvga_SLICE_1 \myvga.SLICE_1 ( .DI1(\myvga.row_9__N_1[8] ), 
    .DI0(\myvga.row_9__N_1[7] ), .D1(\myvga.n5647 ), .B1(\row[8] ), 
    .D0(\myvga.n4076 ), .B0(\row[7] ), .CE(row_0__N_29), .LSR(row_0__N_30), 
    .CLK(clk_25m), .CIN0(\myvga.n4076 ), .CIN1(\myvga.n5647 ), .Q0(\row[7] ), 
    .Q1(\row[8] ), .F0(\myvga.row_9__N_1[7] ), .F1(\myvga.row_9__N_1[8] ), 
    .COUT1(\myvga.n4078 ), .COUT0(\myvga.n5647 ));
  myvga_SLICE_2 \myvga.SLICE_2 ( .DI1(\myvga.column_9__N_31[0] ), 
    .D1(\myvga.n5602 ), .C1(\column[0] ), .B1(VCC_net), 
    .LSR(\myvga.column_0__N_50 ), .CLK(clk_25m), .CIN1(\myvga.n5602 ), 
    .Q1(\column[0] ), .F1(\myvga.column_9__N_31[0] ), .COUT1(\myvga.n4059 ), 
    .COUT0(\myvga.n5602 ));
  myvga_SLICE_3 \myvga.SLICE_3 ( .DI1(\myvga.row_9__N_1[6] ), 
    .DI0(\myvga.row_9__N_1[5] ), .D1(\myvga.n5644 ), .B1(\row[6] ), 
    .D0(\myvga.n4074 ), .B0(\row[5] ), .CE(row_0__N_29), .LSR(row_0__N_30), 
    .CLK(clk_25m), .CIN0(\myvga.n4074 ), .CIN1(\myvga.n5644 ), .Q0(\row[5] ), 
    .Q1(\row[6] ), .F0(\myvga.row_9__N_1[5] ), .F1(\myvga.row_9__N_1[6] ), 
    .COUT1(\myvga.n4076 ), .COUT0(\myvga.n5644 ));
  myvga_SLICE_4 \myvga.SLICE_4 ( .DI1(\myvga.row_9__N_1[4] ), 
    .DI0(\myvga.row_9__N_1[3] ), .D1(\myvga.n5641 ), .B1(\row[4] ), 
    .D0(\myvga.n4072 ), .B0(\row[3] ), .CE(row_0__N_29), .LSR(row_0__N_30), 
    .CLK(clk_25m), .CIN0(\myvga.n4072 ), .CIN1(\myvga.n5641 ), .Q0(\row[3] ), 
    .Q1(\row[4] ), .F0(\myvga.row_9__N_1[3] ), .F1(\myvga.row_9__N_1[4] ), 
    .COUT1(\myvga.n4074 ), .COUT0(\myvga.n5641 ));
  myvga_SLICE_5 \myvga.SLICE_5 ( .DI1(\myvga.row_9__N_1[2] ), 
    .DI0(\myvga.row_9__N_1[1] ), .D1(\myvga.n5638 ), .B1(\row[2] ), 
    .D0(\myvga.n4070 ), .B0(\row[1] ), .CE(row_0__N_29), .LSR(row_0__N_30), 
    .CLK(clk_25m), .CIN0(\myvga.n4070 ), .CIN1(\myvga.n5638 ), .Q0(\row[1] ), 
    .Q1(\row[2] ), .F0(\myvga.row_9__N_1[1] ), .F1(\myvga.row_9__N_1[2] ), 
    .COUT1(\myvga.n4072 ), .COUT0(\myvga.n5638 ));
  myvga_SLICE_6 \myvga.SLICE_6 ( .DI1(\myvga.row_9__N_1[0] ), 
    .D1(\myvga.n5569 ), .C1(\myvga.n4599 ), .B1(\row[0] ), .CE(row_0__N_29), 
    .LSR(row_0__N_30), .CLK(clk_25m), .CIN1(\myvga.n5569 ), .Q1(\row[0] ), 
    .F1(\myvga.row_9__N_1[0] ), .COUT1(\myvga.n4070 ), .COUT0(\myvga.n5569 ));
  myvga_SLICE_7 \myvga.SLICE_7 ( .DI0(\myvga.column_9__N_31[9] ), 
    .D1(\myvga.n5626 ), .D0(\myvga.n4067 ), .C0(\column[9] ), 
    .LSR(\myvga.column_0__N_50 ), .CLK(clk_25m), .CIN0(\myvga.n4067 ), 
    .CIN1(\myvga.n5626 ), .Q0(\column[9] ), .F0(\myvga.column_9__N_31[9] ), 
    .COUT0(\myvga.n5626 ));
  myvga_SLICE_8 \myvga.SLICE_8 ( .DI1(\myvga.column_9__N_31[8] ), 
    .DI0(\myvga.column_9__N_31[7] ), .D1(\myvga.n5623 ), .C1(\column[8] ), 
    .D0(\myvga.n4065 ), .C0(\column[7] ), .LSR(\myvga.column_0__N_50 ), 
    .CLK(clk_25m), .CIN0(\myvga.n4065 ), .CIN1(\myvga.n5623 ), 
    .Q0(\column[7] ), .Q1(\column[8] ), .F0(\myvga.column_9__N_31[7] ), 
    .F1(\myvga.column_9__N_31[8] ), .COUT1(\myvga.n4067 ), 
    .COUT0(\myvga.n5623 ));
  myvga_SLICE_9 \myvga.SLICE_9 ( .DI1(\myvga.column_9__N_31[6] ), 
    .DI0(\myvga.column_9__N_31[5] ), .D1(\myvga.n5620 ), .C1(\column[6] ), 
    .D0(\myvga.n4063 ), .C0(\column[5] ), .LSR(\myvga.column_0__N_50 ), 
    .CLK(clk_25m), .CIN0(\myvga.n4063 ), .CIN1(\myvga.n5620 ), 
    .Q0(\column[5] ), .Q1(\column[6] ), .F0(\myvga.column_9__N_31[5] ), 
    .F1(\myvga.column_9__N_31[6] ), .COUT1(\myvga.n4065 ), 
    .COUT0(\myvga.n5620 ));
  myvga_SLICE_10 \myvga.SLICE_10 ( .DI1(\myvga.column_9__N_31[4] ), 
    .DI0(\myvga.column_9__N_31[3] ), .D1(\myvga.n5617 ), .C1(\column[4] ), 
    .D0(\myvga.n4061 ), .C0(\column[3] ), .LSR(\myvga.column_0__N_50 ), 
    .CLK(clk_25m), .CIN0(\myvga.n4061 ), .CIN1(\myvga.n5617 ), 
    .Q0(\column[3] ), .Q1(\column[4] ), .F0(\myvga.column_9__N_31[3] ), 
    .F1(\myvga.column_9__N_31[4] ), .COUT1(\myvga.n4063 ), 
    .COUT0(\myvga.n5617 ));
  myvga_SLICE_11 \myvga.SLICE_11 ( .DI1(\myvga.column_9__N_31[2] ), 
    .DI0(\myvga.column_9__N_31[1] ), .D1(\myvga.n5614 ), .C1(\column[2] ), 
    .D0(\myvga.n4059 ), .C0(\column[1] ), .LSR(\myvga.column_0__N_50 ), 
    .CLK(clk_25m), .CIN0(\myvga.n4059 ), .CIN1(\myvga.n5614 ), 
    .Q0(\column[1] ), .Q1(\column[2] ), .F0(\myvga.column_9__N_31[1] ), 
    .F1(\myvga.column_9__N_31[2] ), .COUT1(\myvga.n4061 ), 
    .COUT0(\myvga.n5614 ));
  controller_SLICE_12 \controller.SLICE_12 ( 
    .DI1(\controller.counter_20__N_199[14] ), 
    .DI0(\controller.counter_20__N_199[13] ), .D1(\controller.n5596 ), 
    .C1(\controller.counter[14] ), .D0(\controller.n4049 ), 
    .C0(\controller.counter[13] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4049 ), .CIN1(\controller.n5596 ), 
    .Q0(\controller.counter[13] ), .Q1(\controller.counter[14] ), 
    .F0(\controller.counter_20__N_199[13] ), 
    .F1(\controller.counter_20__N_199[14] ), .COUT1(\controller.n4051 ), 
    .COUT0(\controller.n5596 ));
  controller_SLICE_13 \controller.SLICE_13 ( 
    .DI1(\controller.counter_20__N_199[2] ), 
    .DI0(\controller.counter_20__N_199[1] ), .D1(\controller.n5551 ), 
    .C1(\controller.counter[2] ), .D0(\controller.n4037 ), 
    .C0(\controller.n20 ), .LSR(\controller.counter_2__N_236 ), .CLK(clk_25m), 
    .CIN0(\controller.n4037 ), .CIN1(\controller.n5551 ), 
    .Q0(\controller.n20 ), .Q1(\controller.counter[2] ), 
    .F0(\controller.counter_20__N_199[1] ), 
    .F1(\controller.counter_20__N_199[2] ), .COUT1(\controller.n4039 ), 
    .COUT0(\controller.n5551 ));
  controller_SLICE_14 \controller.SLICE_14 ( 
    .DI1(\controller.counter_20__N_199[16] ), 
    .DI0(\controller.counter_20__N_199[15] ), .D1(\controller.n5599 ), 
    .C1(\controller.counter[16] ), .D0(\controller.n4051 ), 
    .C0(\controller.counter[15] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4051 ), .CIN1(\controller.n5599 ), 
    .Q0(\controller.counter[15] ), .Q1(\controller.counter[16] ), 
    .F0(\controller.counter_20__N_199[15] ), 
    .F1(\controller.counter_20__N_199[16] ), .COUT1(\controller.n4053 ), 
    .COUT0(\controller.n5599 ));
  controller_SLICE_15 \controller.SLICE_15 ( 
    .DI1(\controller.counter_20__N_199[12] ), 
    .DI0(\controller.counter_20__N_199[11] ), .D1(\controller.n5566 ), 
    .C1(\controller.counter[12] ), .D0(\controller.n4047 ), 
    .C0(\controller.counter[11] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4047 ), .CIN1(\controller.n5566 ), 
    .Q0(\controller.counter[11] ), .Q1(\controller.counter[12] ), 
    .F0(\controller.counter_20__N_199[11] ), 
    .F1(\controller.counter_20__N_199[12] ), .COUT1(\controller.n4049 ), 
    .COUT0(\controller.n5566 ));
  controller_SLICE_16 \controller.SLICE_16 ( 
    .DI1(\controller.counter_20__N_199[0] ), .D1(\controller.n5548 ), 
    .C1(\controller.n21 ), .B1(VCC_net), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN1(\controller.n5548 ), .Q1(\controller.n21 ), 
    .F1(\controller.counter_20__N_199[0] ), .COUT1(\controller.n4037 ), 
    .COUT0(\controller.n5548 ));
  controller_SLICE_17 \controller.SLICE_17 ( 
    .DI1(\controller.counter_20__N_199[18] ), 
    .DI0(\controller.counter_20__N_199[17] ), .D1(\controller.n5605 ), 
    .C1(\controller.counter[18] ), .D0(\controller.n4053 ), 
    .C0(\controller.counter[17] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4053 ), .CIN1(\controller.n5605 ), 
    .Q0(\controller.counter[17] ), .Q1(\controller.counter[18] ), 
    .F0(\controller.counter_20__N_199[17] ), 
    .F1(\controller.counter_20__N_199[18] ), .COUT1(\controller.n4055 ), 
    .COUT0(\controller.n5605 ));
  controller_SLICE_18 \controller.SLICE_18 ( 
    .DI1(\controller.counter_20__N_199[10] ), 
    .DI0(\controller.counter_20__N_199[9] ), .D1(\controller.n5563 ), 
    .C1(\controller.counter[10] ), .D0(\controller.n4045 ), 
    .C0(\controller.counter[9] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4045 ), .CIN1(\controller.n5563 ), 
    .Q0(\controller.counter[9] ), .Q1(\controller.counter[10] ), 
    .F0(\controller.counter_20__N_199[9] ), 
    .F1(\controller.counter_20__N_199[10] ), .COUT1(\controller.n4047 ), 
    .COUT0(\controller.n5563 ));
  controller_SLICE_19 \controller.SLICE_19 ( 
    .DI1(\controller.counter_20__N_199[8] ), 
    .DI0(\controller.counter_20__N_199[7] ), .D1(\controller.n5560 ), 
    .C1(\controller.counter[8] ), .D0(\controller.n4043 ), 
    .C0(\controller.counter[7] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4043 ), .CIN1(\controller.n5560 ), 
    .Q0(\controller.counter[7] ), .Q1(\controller.counter[8] ), 
    .F0(\controller.counter_20__N_199[7] ), 
    .F1(\controller.counter_20__N_199[8] ), .COUT1(\controller.n4045 ), 
    .COUT0(\controller.n5560 ));
  controller_SLICE_20 \controller.SLICE_20 ( 
    .DI1(\controller.counter_20__N_199[6] ), 
    .DI0(\controller.counter_20__N_199[5] ), .D1(\controller.n5557 ), 
    .C1(\controller.counter[6] ), .D0(\controller.n4041 ), 
    .C0(\controller.counter[5] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4041 ), .CIN1(\controller.n5557 ), 
    .Q0(\controller.counter[5] ), .Q1(\controller.counter[6] ), 
    .F0(\controller.counter_20__N_199[5] ), 
    .F1(\controller.counter_20__N_199[6] ), .COUT1(\controller.n4043 ), 
    .COUT0(\controller.n5557 ));
  controller_SLICE_21 \controller.SLICE_21 ( 
    .DI1(\controller.counter_20__N_199[20] ), 
    .DI0(\controller.counter_20__N_199[19] ), .D1(\controller.n5608 ), 
    .C1(\controller.counter[20] ), .D0(\controller.n4055 ), 
    .C0(\controller.counter[19] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4055 ), .CIN1(\controller.n5608 ), 
    .Q0(\controller.counter[19] ), .Q1(\controller.counter[20] ), 
    .F0(\controller.counter_20__N_199[19] ), 
    .F1(\controller.counter_20__N_199[20] ), .COUT0(\controller.n5608 ));
  controller_SLICE_22 \controller.SLICE_22 ( 
    .DI1(\controller.counter_20__N_199[4] ), 
    .DI0(\controller.counter_20__N_199[3] ), .D1(\controller.n5554 ), 
    .C1(\controller.counter[4] ), .D0(\controller.n4039 ), 
    .C0(\controller.counter[3] ), .LSR(\controller.counter_2__N_236 ), 
    .CLK(clk_25m), .CIN0(\controller.n4039 ), .CIN1(\controller.n5554 ), 
    .Q0(\controller.counter[3] ), .Q1(\controller.counter[4] ), 
    .F0(\controller.counter_20__N_199[3] ), 
    .F1(\controller.counter_20__N_199[4] ), .COUT1(\controller.n4041 ), 
    .COUT0(\controller.n5554 ));
  gamelogic_SLICE_23 \gamelogic.SLICE_23 ( .D1(\gamelogic.n5590 ), 
    .C1(\gamelogic.r_addy_11__N_110[5] ), .B1(\gamelogic.snake_y[2] ), 
    .D0(\gamelogic.r_addy_7__N_134 ), .C0(\gamelogic.r_addy_11__N_110[5] ), 
    .B0(\gamelogic.snake_y[1] ), .CIN0(\gamelogic.r_addy_7__N_134 ), 
    .CIN1(\gamelogic.n5590 ), .F0(\r_addy[7] ), .F1(\r_addy[8] ), 
    .COUT1(\gamelogic.r_addy_9__N_122 ), .COUT0(\gamelogic.n5590 ));
  gamelogic_SLICE_24 \gamelogic.SLICE_24 ( .D1(\gamelogic.n5587 ), 
    .C1(\gamelogic.r_addy_6__N_139 ), .B1(\snake_y[0] ), 
    .B0(\gamelogic.r_addy_11__N_110[5] ), .CIN1(\gamelogic.n5587 ), 
    .F1(\r_addy[6] ), .COUT1(\gamelogic.r_addy_7__N_134 ), 
    .COUT0(\gamelogic.n5587 ));
  gamelogic_SLICE_25 \gamelogic.SLICE_25 ( .D1(\gamelogic.n5635 ), 
    .D0(\gamelogic.n4085 ), .B0(\gamelogic.counterx[5] ), 
    .CIN0(\gamelogic.n4085 ), .CIN1(\gamelogic.n5635 ), .F0(\gamelogic.n256 ), 
    .F1(\gamelogic.n255 ), .COUT0(\gamelogic.n5635 ));
  gamelogic_SLICE_26 \gamelogic.SLICE_26 ( .D1(\gamelogic.n5632 ), 
    .B1(\gamelogic.counterx[4] ), .D0(\gamelogic.n4083 ), 
    .B0(\gamelogic.counterx[3] ), .CIN0(\gamelogic.n4083 ), 
    .CIN1(\gamelogic.n5632 ), .F0(\gamelogic.n258 ), .F1(\gamelogic.n257 ), 
    .COUT1(\gamelogic.n4085 ), .COUT0(\gamelogic.n5632 ));
  gamelogic_SLICE_27 \gamelogic.SLICE_27 ( .DI1(\gamelogic.counterx_2__N_273 ), 
    .DI0(\gamelogic.counterx_1__N_274 ), .D1(\gamelogic.n5629 ), 
    .B1(\gamelogic.counterx[2] ), .D0(\gamelogic.n4081 ), 
    .B0(\gamelogic.counterx[1] ), .CLK(clk_60hz), .CIN0(\gamelogic.n4081 ), 
    .CIN1(\gamelogic.n5629 ), .Q0(\gamelogic.counterx[1] ), 
    .Q1(\gamelogic.counterx[2] ), .F0(\gamelogic.counterx_1__N_274 ), 
    .F1(\gamelogic.counterx_2__N_273 ), .COUT1(\gamelogic.n4083 ), 
    .COUT0(\gamelogic.n5629 ));
  gamelogic_SLICE_28 \gamelogic.SLICE_28 ( .DI1(\gamelogic.counterx_0__N_275 ), 
    .D1(\gamelogic.n5572 ), .C1(VCC_net), .B1(\gamelogic.counterx[0] ), 
    .CLK(clk_60hz), .CIN1(\gamelogic.n5572 ), .Q1(\gamelogic.counterx[0] ), 
    .F1(\gamelogic.counterx_0__N_275 ), .COUT1(\gamelogic.n4081 ), 
    .COUT0(\gamelogic.n5572 ));
  gamelogic_SLICE_29 \gamelogic.SLICE_29 ( .D1(\gamelogic.n5584 ), 
    .D0(\gamelogic.r_addy_5__N_144 ), .C0(\gamelogic.r_addy_5__N_143[5] ), 
    .B0(\gamelogic.snake_x[5] ), .CIN0(\gamelogic.r_addy_5__N_144 ), 
    .CIN1(\gamelogic.n5584 ), .F0(\r_addy[5] ), .COUT0(\gamelogic.n5584 ));
  gamelogic_SLICE_30 \gamelogic.SLICE_30 ( .D1(\gamelogic.n5581 ), 
    .C1(\gamelogic.r_addy_5__N_143[5] ), .B1(\gamelogic.snake_x[4] ), 
    .D0(\gamelogic.r_addy_3__N_155 ), .C0(\gamelogic.r_addy_5__N_143[5] ), 
    .B0(\gamelogic.snake_x[3] ), .CIN0(\gamelogic.r_addy_3__N_155 ), 
    .CIN1(\gamelogic.n5581 ), .F0(\r_addy[3] ), .F1(\r_addy[4] ), 
    .COUT1(\gamelogic.r_addy_5__N_144 ), .COUT0(\gamelogic.n5581 ));
  gamelogic_SLICE_31 \gamelogic.SLICE_31 ( .D1(\gamelogic.n5578 ), 
    .C1(\gamelogic.r_addy_5__N_143[5] ), .B1(\snake_x[2] ), 
    .D0(\gamelogic.r_addy_1__N_167 ), .C0(\gamelogic.r_addy_5__N_143[5] ), 
    .B0(\snake_x[1] ), .CIN0(\gamelogic.r_addy_1__N_167 ), 
    .CIN1(\gamelogic.n5578 ), .F0(\r_addy[1] ), .F1(\r_addy[2] ), 
    .COUT1(\gamelogic.r_addy_3__N_155 ), .COUT0(\gamelogic.n5578 ));
  gamelogic_SLICE_32 \gamelogic.SLICE_32 ( .D1(\gamelogic.n5575 ), 
    .C1(\gamelogic.r_addy_0__N_172 ), .B1(\snake_x[0] ), 
    .B0(\gamelogic.r_addy_5__N_143[5] ), .CIN1(\gamelogic.n5575 ), 
    .F1(\r_addy[0] ), .COUT1(\gamelogic.r_addy_1__N_167 ), 
    .COUT0(\gamelogic.n5575 ));
  gamelogic_SLICE_33 \gamelogic.SLICE_33 ( .D1(\gamelogic.n5611 ), 
    .D0(\gamelogic.r_addy_11__N_111 ), .C0(\gamelogic.r_addy_11__N_110[5] ), 
    .CIN0(\gamelogic.r_addy_11__N_111 ), .CIN1(\gamelogic.n5611 ), 
    .F0(\gamelogic.r_addy[11]_2 ), .COUT0(\gamelogic.n5611 ));
  gamelogic_SLICE_34 \gamelogic.SLICE_34 ( .D1(\gamelogic.n5593 ), 
    .C1(\gamelogic.r_addy_11__N_110[5] ), .B1(\gamelogic.snake_y[4] ), 
    .D0(\gamelogic.r_addy_9__N_122 ), .C0(\gamelogic.r_addy_11__N_110[5] ), 
    .B0(\gamelogic.snake_y[3] ), .CIN0(\gamelogic.r_addy_9__N_122 ), 
    .CIN1(\gamelogic.n5593 ), .F0(\gamelogic.r_addy[9]_2 ), 
    .F1(\gamelogic.r_addy[10]_2 ), .COUT1(\gamelogic.r_addy_11__N_111 ), 
    .COUT0(\gamelogic.n5593 ));
  print_pat_SLICE_35 \print_pat.SLICE_35 ( .DI1(\print_pat.rgb_5__N_63[1] ), 
    .DI0(\print_pat.rgb_0__N_78 ), .D1(\print_pat.make_start_screen[1] ), 
    .C1(\result[1] ), .B1(\result[0] ), .A1(\print_pat.n589 ), 
    .D0(\print_pat.make_start_screen[0] ), .C0(\print_pat.n10 ), 
    .B0(\result[1] ), .A0(\result[0] ), .CE(\print_pat.rgb_0__N_79 ), 
    .LSR(r_addr_0__N_198), .CLK(clk_25m), .Q0(\rgb[0] ), .Q1(\rgb[1] ), 
    .F0(\print_pat.rgb_0__N_78 ), .F1(\print_pat.rgb_5__N_63[1] ));
  print_pat_SLICE_37 \print_pat.SLICE_37 ( .DI1(\print_pat.rgb_5__N_63[3] ), 
    .DI0(\print_pat.rgb_5__N_63[2] ), .D1(\print_pat.make_start_screen[3] ), 
    .C1(\print_pat.n591 ), .B1(\result[0] ), .A1(\result[1] ), 
    .D0(\result[1] ), .C0(\result[0] ), .B0(\print_pat.n590 ), 
    .A0(\print_pat.make_start_screen[2] ), .CE(\print_pat.rgb_0__N_79 ), 
    .LSR(r_addr_0__N_198), .CLK(clk_25m), .Q0(\rgb[2] ), .Q1(\rgb[3] ), 
    .F0(\print_pat.rgb_5__N_63[2] ), .F1(\print_pat.rgb_5__N_63[3] ));
  print_pat_SLICE_38 \print_pat.SLICE_38 ( .DI1(\print_pat.rgb_5__N_63[5] ), 
    .DI0(\print_pat.rgb_5__N_63[4] ), .D1(\print_pat.make_start_screen[5] ), 
    .C1(\print_pat.n593 ), .B1(\result[0] ), .A1(\result[1] ), 
    .D0(\result[1] ), .C0(\result[0] ), .B0(\print_pat.n592 ), 
    .A0(\print_pat.make_start_screen[4] ), .CE(\print_pat.rgb_0__N_79 ), 
    .LSR(r_addr_0__N_198), .CLK(clk_25m), .Q0(\rgb[4] ), .Q1(\rgb[5] ), 
    .F0(\print_pat.rgb_5__N_63[4] ), .F1(\print_pat.rgb_5__N_63[5] ));
  print_pat_snake_dumpy_SLICE_40 \print_pat.snake_dumpy.SLICE_40 ( 
    .DI1(hsync_N_292), .DI0(\print_pat.snake_dumpy.draw_dumpy_5__N_186 ), 
    .D1(n3007), .C1(n4), .B1(\column[5] ), .A1(\column[6] ), .D0(\column[1] ), 
    .C0(\column[2] ), .B0(\column[0] ), .A0(\column[3] ), .CLK(clk_25m), 
    .Q0(\print_pat.draw_dumpy[5] ), .Q1(hsync), 
    .F0(\print_pat.snake_dumpy.draw_dumpy_5__N_186 ), .F1(hsync_N_292));
  controller_SLICE_45 \controller.SLICE_45 ( 
    .DI1(\controller.controllerOutput_7__N_51[1] ), 
    .DI0(\controller.controllerOutput_7__N_51[0] ), .D1(\controller.shift[1] ), 
    .D0(\controller.shift[0] ), .CE(\controller.controllerOutput_0__N_62 ), 
    .CLK(\controller.counter[20] ), .Q0(\controllerOutput[0] ), 
    .Q1(\controllerOutput[1] ), .F0(\controller.controllerOutput_7__N_51[0] ), 
    .F1(\controller.controllerOutput_7__N_51[1] ));
  controller_SLICE_46 \controller.SLICE_46 ( 
    .DI1(\controller.shift[1].sig_007.FeedThruLUT ), 
    .DI0(\controller.shift[0].sig_000.FeedThruLUT ), 
    .D1(\controller.shift[1] ), .D0(\controller.shift[0] ), 
    .CE(\controller.interimShift_0__N_244 ), .CLK(\controller.counter[20] ), 
    .Q0(\controller.interimShift[0] ), .Q1(\controller.interimShift[1] ), 
    .F0(\controller.shift[0].sig_000.FeedThruLUT ), 
    .F1(\controller.shift[1].sig_007.FeedThruLUT ));
  controller_SLICE_47 \controller.SLICE_47 ( 
    .DI1(\controller.shift[6].sig_002.FeedThruLUT ), 
    .DI0(\controller.shift[7].sig_001.FeedThruLUT ), 
    .D1(\controller.shift[6] ), .C0(\controller.shift[7] ), 
    .CE(\controller.interimShift_0__N_244 ), .CLK(\controller.counter[20] ), 
    .Q0(\controller.interimShift[7] ), .Q1(\controller.interimShift[6] ), 
    .F0(\controller.shift[7].sig_001.FeedThruLUT ), 
    .F1(\controller.shift[6].sig_002.FeedThruLUT ));
  controller_SLICE_49 \controller.SLICE_49 ( 
    .DI1(\controller.shift[4].sig_004.FeedThruLUT ), 
    .DI0(\controller.shift[5].sig_003.FeedThruLUT ), 
    .D1(\controller.shift[4] ), .D0(\controller.shift[5] ), 
    .CE(\controller.interimShift_0__N_244 ), .CLK(\controller.counter[20] ), 
    .Q0(\controller.interimShift[5] ), .Q1(\controller.interimShift[4] ), 
    .F0(\controller.shift[5].sig_003.FeedThruLUT ), 
    .F1(\controller.shift[4].sig_004.FeedThruLUT ));
  controller_SLICE_51 \controller.SLICE_51 ( 
    .DI1(\controller.shift[2].sig_006.FeedThruLUT ), 
    .DI0(\controller.shift[3].sig_005.FeedThruLUT ), 
    .C1(\controller.shift[2] ), .D0(\controller.shift[3] ), 
    .CE(\controller.interimShift_0__N_244 ), .CLK(\controller.counter[20] ), 
    .Q0(\controller.interimShift[3] ), .Q1(\controller.interimShift[2] ), 
    .F0(\controller.shift[3].sig_005.FeedThruLUT ), 
    .F1(\controller.shift[2].sig_006.FeedThruLUT ));
  controller_SLICE_54 \controller.SLICE_54 ( 
    .DI1(\controller.controllerOutput_7__N_51[5] ), 
    .DI0(\controller.controllerOutput_7__N_51[7] ), .D1(\controller.shift[5] ), 
    .C0(\controller.shift[7] ), .CE(\controller.controllerOutput_0__N_62 ), 
    .CLK(\controller.counter[20] ), .Q0(\controllerOutput[7] ), 
    .Q1(\controllerOutput[5] ), .F0(\controller.controllerOutput_7__N_51[7] ), 
    .F1(\controller.controllerOutput_7__N_51[5] ));
  controller_SLICE_56 \controller.SLICE_56 ( 
    .DI1(\controller.controllerOutput_7__N_51[2] ), 
    .DI0(\controller.controllerOutput_7__N_51[3] ), .D1(\controller.shift[2] ), 
    .D0(\controller.shift[3] ), .CE(\controller.controllerOutput_0__N_62 ), 
    .CLK(\controller.counter[20] ), .Q0(\controllerOutput[3] ), 
    .Q1(\controllerOutput[2] ), .F0(\controller.controllerOutput_7__N_51[3] ), 
    .F1(\controller.controllerOutput_7__N_51[2] ));
  controller_SLICE_60 \controller.SLICE_60 ( 
    .DI1(\controller.shift[4].sig_010.FeedThruLUT ), 
    .DI0(\controller.shift[5].sig_009.FeedThruLUT ), 
    .D1(\controller.shift[4] ), .D0(\controller.shift[5] ), .CLK(clock_c), 
    .Q0(\controller.shift[6] ), .Q1(\controller.shift[5] ), 
    .F0(\controller.shift[5].sig_009.FeedThruLUT ), 
    .F1(\controller.shift[4].sig_010.FeedThruLUT ));
  controller_SLICE_62 \controller.SLICE_62 ( 
    .DI1(\controller.shift[2].sig_012.FeedThruLUT ), 
    .DI0(\controller.shift[3].sig_011.FeedThruLUT ), 
    .D1(\controller.shift[2] ), .D0(\controller.shift[3] ), .CLK(clock_c), 
    .Q0(\controller.shift[4] ), .Q1(\controller.shift[3] ), 
    .F0(\controller.shift[3].sig_011.FeedThruLUT ), 
    .F1(\controller.shift[2].sig_012.FeedThruLUT ));
  controller_SLICE_64 \controller.SLICE_64 ( 
    .DI1(\controller.shift[0].sig_014.FeedThruLUT ), 
    .DI0(\controller.shift[1].sig_013.FeedThruLUT ), 
    .D1(\controller.shift[0] ), .D0(\controller.shift[1] ), .CLK(clock_c), 
    .Q0(\controller.shift[2] ), .Q1(\controller.shift[1] ), 
    .F0(\controller.shift[1].sig_013.FeedThruLUT ), 
    .F1(\controller.shift[0].sig_014.FeedThruLUT ));
  gamelogic_SLICE_66 \gamelogic.SLICE_66 ( 
    .DI1(\gamelogic.countery_4__N_276[1] ), 
    .DI0(\gamelogic.countery_0__N_280 ), .D1(\gamelogic.n377 ), 
    .C1(\gamelogic.countery[1] ), .B1(\gamelogic.countery[0] ), 
    .C0(\gamelogic.countery[0] ), .CLK(clk_60hz), .Q0(\gamelogic.countery[0] ), 
    .Q1(\gamelogic.countery[1] ), .F0(\gamelogic.countery_0__N_280 ), 
    .F1(\gamelogic.countery_4__N_276[1] ));
  gamelogic_SLICE_67 \gamelogic.SLICE_67 ( 
    .DI1(\gamelogic.w_addr_10__N_82[1] ), .DI0(\gamelogic.w_addr_10__N_82[0] ), 
    .D1(\gamelogic.n261[1] ), .C1(\snake_x[1] ), .B1(w_data_1__N_106), 
    .D0(\gamelogic.n261[0] ), .C0(\snake_x[0] ), .A0(w_data_1__N_106), 
    .CE(\gamelogic.w_data_1__N_105 ), .CLK(clk_60hz), .Q0(\w_addr[0] ), 
    .Q1(\w_addr[1] ), .F0(\gamelogic.w_addr_10__N_82[0] ), 
    .F1(\gamelogic.w_addr_10__N_82[1] ));
  gamelogic_SLICE_68 \gamelogic.SLICE_68 ( .DI1(\gamelogic.snake_y_2__N_263 ), 
    .DI0(\gamelogic.snake_y_1__N_266[1] ), .D1(\gamelogic.n19 ), 
    .C1(\gamelogic.n4766 ), .B1(\gamelogic.n5421 ), .A1(\r_addy[8] ), 
    .D0(\gamelogic.n166 ), .C0(\gamelogic.n4580 ), .B0(\r_addy[7] ), 
    .CE(snake_y_1__N_267), .LSR(snake_y_1__N_268), .CLK(clk_60hz), 
    .Q0(\gamelogic.snake_y[1] ), .Q1(\gamelogic.snake_y[2] ), 
    .F0(\gamelogic.snake_y_1__N_266[1] ), .F1(\gamelogic.snake_y_2__N_263 ));
  gamelogic_SLICE_70 \gamelogic.SLICE_70 ( .DI1(\gamelogic.snake_y_4__N_257 ), 
    .DI0(\gamelogic.snake_y_3__N_260 ), .D1(\gamelogic.n4776 ), 
    .C1(\gamelogic.n4560 ), .B1(\gamelogic.r_addy[9]_2 ), 
    .A1(\gamelogic.r_addy[10]_2 ), .D0(\r_addy[8] ), 
    .C0(\gamelogic.r_addy[9]_2 ), .B0(\gamelogic.n4560 ), 
    .A0(\gamelogic.n4768 ), .CE(snake_y_1__N_267), .LSR(snake_y_1__N_268), 
    .CLK(clk_60hz), .Q0(\gamelogic.snake_y[3] ), .Q1(\gamelogic.snake_y[4] ), 
    .F0(\gamelogic.snake_y_3__N_260 ), .F1(\gamelogic.snake_y_4__N_257 ));
  gamelogic_SLICE_73 \gamelogic.SLICE_73 ( 
    .DI1(\gamelogic.snake_x_4__N_248[4] ), 
    .DI0(\gamelogic.snake_x_4__N_248[3] ), .D1(\r_addy[3] ), .C1(\r_addy[4] ), 
    .B1(\r_addy[5] ), .D0(\r_addy[4] ), .C0(\r_addy[3] ), .A0(\r_addy[5] ), 
    .CE(snake_y_1__N_267), .LSR(snake_x_3__N_253), .CLK(clk_60hz), 
    .Q0(\gamelogic.snake_x[3] ), .Q1(\gamelogic.snake_x[4] ), 
    .F0(\gamelogic.snake_x_4__N_248[3] ), .F1(\gamelogic.snake_x_4__N_248[4] ));
  gamelogic_SLICE_75 \gamelogic.SLICE_75 ( .DI0(\gamelogic.snake_x_5__N_245 ), 
    .D0(\r_addy[4] ), .C0(\r_addy[3] ), .A0(\r_addy[5] ), 
    .CE(snake_y_1__N_267), .LSR(snake_x_3__N_253), .CLK(clk_60hz), 
    .Q0(\gamelogic.snake_x[5] ), .F0(\gamelogic.snake_x_5__N_245 ));
  gamelogic_SLICE_76 \gamelogic.SLICE_76 ( 
    .DI0(\gamelogic.game_over_check_N_294 ), .D0(\r_addy[3] ), 
    .C0(\gamelogic.n3282 ), .B0(\r_addy[4] ), .A0(\r_addy[5] ), 
    .CE(\gamelogic.game_over_check_N_295 ), 
    .LSR(\gamelogic.game_over_check_N_296 ), .CLK(clk_60hz), 
    .Q0(game_over_check), .F0(\gamelogic.game_over_check_N_294 ));
  SLICE_77 SLICE_77( .DI0(w_data_0__N_107), .D0(w_data_1__N_106), .C0(n4594), 
    .B0(\w_data[0] ), .CLK(clk_60hz), .Q0(\w_data[0] ), .F0(w_data_0__N_107));
  gamelogic_SLICE_81 \gamelogic.SLICE_81 ( 
    .DI0(\gamelogic.w_addr_10__N_82[10] ), .D0(\gamelogic.n261[10] ), 
    .C0(\gamelogic.snake_y[4] ), .B0(w_data_1__N_106), 
    .CE(\gamelogic.w_data_1__N_105 ), .CLK(clk_60hz), .Q0(\w_addr[10] ), 
    .F0(\gamelogic.w_addr_10__N_82[10] ));
  gamelogic_SLICE_82 \gamelogic.SLICE_82 ( 
    .DI1(\gamelogic.w_addr_10__N_82[8] ), .DI0(\gamelogic.w_addr_10__N_82[9] ), 
    .D1(\gamelogic.n261[8] ), .C1(\gamelogic.snake_y[2] ), 
    .A1(w_data_1__N_106), .D0(\gamelogic.n261[9] ), 
    .C0(\gamelogic.snake_y[3] ), .B0(w_data_1__N_106), 
    .CE(\gamelogic.w_data_1__N_105 ), .CLK(clk_60hz), .Q0(\w_addr[9] ), 
    .Q1(\w_addr[8] ), .F0(\gamelogic.w_addr_10__N_82[9] ), 
    .F1(\gamelogic.w_addr_10__N_82[8] ));
  gamelogic_SLICE_84 \gamelogic.SLICE_84 ( 
    .DI1(\gamelogic.w_addr_10__N_82[6] ), .DI0(\gamelogic.w_addr_10__N_82[7] ), 
    .D1(\gamelogic.n261[6] ), .C1(\snake_y[0] ), .A1(w_data_1__N_106), 
    .D0(w_data_1__N_106), .C0(\gamelogic.n261[7] ), 
    .B0(\gamelogic.snake_y[1] ), .CE(\gamelogic.w_data_1__N_105 ), 
    .CLK(clk_60hz), .Q0(\w_addr[7] ), .Q1(\w_addr[6] ), 
    .F0(\gamelogic.w_addr_10__N_82[7] ), .F1(\gamelogic.w_addr_10__N_82[6] ));
  gamelogic_SLICE_86 \gamelogic.SLICE_86 ( 
    .DI1(\gamelogic.w_addr_10__N_82[4] ), .DI0(\gamelogic.w_addr_10__N_82[5] ), 
    .D1(\gamelogic.n261[4] ), .C1(\gamelogic.snake_x[4] ), 
    .A1(w_data_1__N_106), .D0(w_data_1__N_106), .C0(\gamelogic.snake_x[5] ), 
    .B0(\gamelogic.n261[5] ), .CE(\gamelogic.w_data_1__N_105 ), .CLK(clk_60hz), 
    .Q0(\w_addr[5] ), .Q1(\w_addr[4] ), .F0(\gamelogic.w_addr_10__N_82[5] ), 
    .F1(\gamelogic.w_addr_10__N_82[4] ));
  gamelogic_SLICE_88 \gamelogic.SLICE_88 ( 
    .DI1(\gamelogic.w_addr_10__N_82[2] ), .DI0(\gamelogic.w_addr_10__N_82[3] ), 
    .D1(\gamelogic.n261[2] ), .C1(\snake_x[2] ), .B1(w_data_1__N_106), 
    .D0(\gamelogic.n261[3] ), .C0(\gamelogic.snake_x[3] ), 
    .A0(w_data_1__N_106), .CE(\gamelogic.w_data_1__N_105 ), .CLK(clk_60hz), 
    .Q0(\w_addr[3] ), .Q1(\w_addr[2] ), .F0(\gamelogic.w_addr_10__N_82[3] ), 
    .F1(\gamelogic.w_addr_10__N_82[2] ));
  gamelogic_SLICE_92 \gamelogic.SLICE_92 ( 
    .DI1(\gamelogic.countery_4__N_276[2] ), 
    .DI0(\gamelogic.countery_4__N_276[3] ), .D1(\gamelogic.n377 ), 
    .C1(\gamelogic.countery[2] ), .B1(\gamelogic.countery[0] ), 
    .A1(\gamelogic.countery[1] ), .D0(\gamelogic.n702 ), .C0(\gamelogic.n377 ), 
    .B0(\gamelogic.n4018 ), .A0(\gamelogic.countery[3] ), .CLK(clk_60hz), 
    .Q0(\gamelogic.countery[3] ), .Q1(\gamelogic.countery[2] ), 
    .F0(\gamelogic.countery_4__N_276[3] ), 
    .F1(\gamelogic.countery_4__N_276[2] ));
  gamelogic_SLICE_96 \gamelogic.SLICE_96 ( .DI1(\gamelogic.counterx_3__N_272 ), 
    .DI0(\gamelogic.counterx_5__N_270[4] ), .D1(\gamelogic.n257 ), 
    .C1(\gamelogic.n258 ), .B1(\gamelogic.n255 ), .A1(\gamelogic.n256 ), 
    .D0(\gamelogic.n258 ), .C0(\gamelogic.n257 ), .B0(\gamelogic.n256 ), 
    .A0(\gamelogic.n255 ), .CLK(clk_60hz), .Q0(\gamelogic.counterx[4] ), 
    .Q1(\gamelogic.counterx[3] ), .F0(\gamelogic.counterx_5__N_270[4] ), 
    .F1(\gamelogic.counterx_3__N_272 ));
  SLICE_99 SLICE_99( .DI1(snake_x_1__N_255), .DI0(snake_x_0__N_256), 
    .D1(snake_y_1__N_267), .C1(\snake_x[1] ), .B1(snake_x_3__N_253), 
    .A1(\r_addy[1] ), .D0(\snake_x[0] ), .C0(snake_y_1__N_267), 
    .B0(\r_addy[0] ), .A0(snake_x_3__N_253), .CLK(clk_60hz), .Q0(\snake_x[0] ), 
    .Q1(\snake_x[1] ), .F0(snake_x_0__N_256), .F1(snake_x_1__N_255));
  print_pat_SLICE_106 \print_pat.SLICE_106 ( 
    .D1(\print_pat.ram_mod.r_data_out_1__N_177 ), 
    .C1(\print_pat.ram_mod.r_data_out_0__N_182 ), 
    .A1(\print_pat.ram_mod.r_data_out_1__N_178 ), 
    .D0(\print_pat.color_snake_alive[0] ), .C0(\print_pat.color_apple[0] ), 
    .B0(\r_data_out[1] ), .A0(\r_data_out[0] ), .F0(\print_pat.n536[0] ), 
    .F1(\r_data_out[1] ));
  print_pat_SLICE_107 \print_pat.SLICE_107 ( 
    .D1(\print_pat.make_end_screen[0] ), .C1(\print_pat.n13 ), 
    .B1(\print_pat.n587 ), .D0(\print_pat.n536[0] ), .C0(\r_data_out[1] ), 
    .B0(\r_data_out[2] ), .A0(\r_data_out[0] ), .F0(\print_pat.n13 ), 
    .F1(\print_pat.n10 ));
  print_pat_SLICE_108 \print_pat.SLICE_108 ( .D1(\column[2] ), 
    .C1(\column[4] ), .B1(\column[9] ), .D0(\r_addy[5] ), .C0(r_addr_0__N_198), 
    .A0(\column[9] ), .F0(\print_pat.r_addr[5] ), .F1(\myvga.n4746 ));
  myvga_SLICE_109 \myvga.SLICE_109 ( .D1(\column[9] ), .C1(\myvga.n3688 ), 
    .B1(\row[9] ), .A1(n4320), .D0(\column[7] ), .C0(\column[8] ), 
    .F0(\myvga.n3688 ), .F1(r_addr_0__N_198));
  print_pat_ram_mod_SLICE_110 \print_pat.ram_mod.SLICE_110 ( 
    .D1(\print_pat.ram_mod.r_data_out_0__N_182 ), .C1(\r_data_out[0] ), 
    .B1(\print_pat.ram_mod.r_data_out_2__N_174 ), 
    .A1(\print_pat.ram_mod.r_data_out_2__N_175 ), 
    .D0(\print_pat.ram_mod.r_data_out_0__N_181 ), 
    .C0(\print_pat.ram_mod.r_data_out_0__N_180 ), 
    .A0(\print_pat.ram_mod.r_data_out_0__N_182 ), .F0(\r_data_out[0] ), 
    .F1(\print_pat.n2868 ));
  gamelogic_SLICE_112 \gamelogic.SLICE_112 ( .D1(\gamelogic.n4748 ), 
    .C1(\gamelogic.n10 ), .B1(snake_y_1__N_267), .A1(\gamelogic.counter[1] ), 
    .D0(\gamelogic.counter[0] ), .C0(\r_data_out[2] ), .B0(\r_data_out[0] ), 
    .A0(\r_data_out[1] ), .F0(\gamelogic.n10 ), .F1(n4594));
  gamelogic_SLICE_113 \gamelogic.SLICE_113 ( .D1(\gamelogic.counter[2] ), 
    .C1(\gamelogic.n3574 ), .B1(\gamelogic.counter[1] ), 
    .A1(\gamelogic.counter[0] ), .D0(\gamelogic.counter[4] ), 
    .C0(\gamelogic.counter[3] ), .F0(\gamelogic.n3574 ), .F1(snake_y_1__N_267));
  print_pat_SLICE_114 \print_pat.SLICE_114 ( .D1(\print_pat.n5 ), 
    .C1(\print_pat.n4899 ), .B1(\print_pat.make_end_screen[1] ), 
    .A1(\print_pat.n587 ), .D0(\r_data_out[1] ), .C0(\print_pat.n2868 ), 
    .B0(\print_pat.color_apple[1] ), .A0(\print_pat.color_snake_alive[1] ), 
    .F0(\print_pat.n4899 ), .F1(\print_pat.n589 ));
  print_pat_SLICE_117 \print_pat.SLICE_117 ( .D1(\result[0] ), 
    .C1(\print_pat.n5_adj_301 ), .A1(\result[1] ), .D0(\r_data_out[2] ), 
    .C0(\r_data_out[0] ), .B0(\r_data_out[1] ), .F0(\print_pat.n5_adj_301 ), 
    .F1(\print_pat.n587 ));
  print_pat_SLICE_118 \print_pat.SLICE_118 ( 
    .DI1(\fsm_control.result_0__N_184 ), .D1(\s[0] ), .C1(\s[1] ), 
    .B1(\controllerOutput[7] ), .A1(\controllerOutput[5] ), .D0(\result[1] ), 
    .C0(\result[0] ), .CE(\fsm_control.result_0__N_185 ), .CLK(clk_25m), 
    .Q1(\result[0] ), .F0(\print_pat.n5_adj_300 ), 
    .F1(\fsm_control.result_0__N_184 ));
  print_pat_SLICE_119 \print_pat.SLICE_119 ( .D1(\result[0] ), 
    .C1(\print_pat.n4566 ), .B1(r_addr_0__N_198), .A1(\result[1] ), 
    .D0(\r_data_out[1] ), .C0(\r_data_out[0] ), .B0(\r_data_out[2] ), 
    .A0(\print_pat.n5_adj_300 ), .F0(\print_pat.n4566 ), 
    .F1(\print_pat.rgb_0__N_79 ));
  print_pat_ram_mod_SLICE_121 \print_pat.ram_mod.SLICE_121 ( 
    .C1(\r_data_out[2] ), .B1(\r_data_out[0] ), .A1(\r_data_out[1] ), 
    .D0(\print_pat.ram_mod.r_data_out_0__N_182 ), 
    .C0(\print_pat.ram_mod.r_data_out_2__N_175 ), 
    .B0(\print_pat.ram_mod.r_data_out_2__N_174 ), .F0(\r_data_out[2] ), 
    .F1(\print_pat.n5 ));
  print_pat_SLICE_122 \print_pat.SLICE_122 ( .D1(\print_pat.n2868 ), 
    .C1(\print_pat.n2854 ), .B1(\print_pat.n5 ), 
    .A1(\print_pat.draw_dumpy[5] ), .D0(\print_pat.color_snake_alive[5] ), 
    .C0(\r_data_out[1] ), .B0(\print_pat.color_apple[5] ), 
    .F0(\print_pat.n2854 ), .F1(\print_pat.n505[5] ));
  print_pat_SLICE_124 \print_pat.SLICE_124 ( 
    .D0(\print_pat.color_snake_alive[3] ), .C0(\print_pat.color_apple[3] ), 
    .B0(\r_data_out[1] ), .A0(\r_data_out[0] ), .F0(\print_pat.n536[3] ));
  print_pat_SLICE_125 \print_pat.SLICE_125 ( .D1(\print_pat.n536[3] ), 
    .C1(\print_pat.n3012 ), .B1(\print_pat.draw_dumpy[5] ), 
    .A1(\r_data_out[2] ), .D0(\print_pat.ram_mod.r_data_out_1__N_177 ), 
    .C0(\print_pat.ram_mod.r_data_out_1__N_178 ), 
    .B0(\print_pat.ram_mod.r_data_out_0__N_182 ), .A0(\r_data_out[0] ), 
    .F0(\print_pat.n3012 ), .F1(\print_pat.n3088 ));
  print_pat_SLICE_126 \print_pat.SLICE_126 ( 
    .D1(\print_pat.make_end_screen[4] ), .C1(\print_pat.n2856 ), 
    .B1(\print_pat.n587 ), .A1(\print_pat.n2868 ), 
    .D0(\print_pat.color_snake_alive[4] ), .C0(\print_pat.color_apple[4] ), 
    .B0(\r_data_out[1] ), .F0(\print_pat.n2856 ), .F1(\print_pat.n592 ));
  print_pat_SLICE_128 \print_pat.SLICE_128 ( 
    .D1(\print_pat.make_end_screen[2] ), .C1(\print_pat.n2858 ), 
    .B1(\print_pat.n587 ), .A1(\print_pat.n2868 ), 
    .D0(\print_pat.color_snake_alive[2] ), .C0(\print_pat.color_apple[2] ), 
    .B0(\r_data_out[1] ), .F0(\print_pat.n2858 ), .F1(\print_pat.n590 ));
  myvga_SLICE_130 \myvga.SLICE_130 ( .D1(vsync), .C1(\myvga.n4928 ), 
    .B1(\myvga.n4929 ), .A1(\row[1] ), .D0(\row[2] ), .C0(\myvga.n1 ), 
    .B0(\row[3] ), .F0(\myvga.n4928 ), .F1(\myvga.n3442 ));
  myvga_SLICE_131 \myvga.SLICE_131 ( .D1(\row[7] ), .C1(\row[2] ), 
    .B1(\row[5] ), .A1(\row[3] ), .D0(\row[3] ), .C0(\myvga.n1 ), 
    .B0(\row[2] ), .F0(\myvga.n4929 ), .F1(\myvga.n8 ));
  myvga_SLICE_132 \myvga.SLICE_132 ( .D1(\column[1] ), .C1(\myvga.n15 ), 
    .B1(\column[7] ), .A1(\column[8] ), .D0(\column[5] ), .B0(\column[6] ), 
    .F0(\myvga.n15 ), .F1(\myvga.n12 ));
  myvga_SLICE_134 \myvga.SLICE_134 ( .D1(hsync), .C1(\myvga.n4599 ), 
    .D0(\myvga.n4746 ), .C0(\myvga.n12 ), .B0(\column[3] ), .A0(\column[0] ), 
    .F0(\myvga.n4599 ), .F1(n4));
  myvga_SLICE_136 \myvga.SLICE_136 ( .D1(\column[0] ), .C1(\myvga.n3641 ), 
    .B1(\column[8] ), .A1(\column[9] ), .D0(\column[4] ), .C0(\column[2] ), 
    .F0(\myvga.n3641 ), .F1(\myvga.n14 ));
  myvga_SLICE_138 \myvga.SLICE_138 ( .D1(\myvga.n14 ), .C1(\myvga.n10 ), 
    .B1(\column[1] ), .A1(\column[7] ), .D0(\column[3] ), .C0(\column[6] ), 
    .B0(\column[5] ), .F0(\myvga.n10 ), .F1(\myvga.column_0__N_50 ));
  myvga_SLICE_140 \myvga.SLICE_140 ( .D1(\row[9] ), .C1(\myvga.n4756 ), 
    .B1(\row[5] ), .A1(\row[6] ), .C0(\row[7] ), .A0(\row[8] ), 
    .F0(\myvga.n4756 ), .F1(\myvga.n1 ));
  myvga_SLICE_142 \myvga.SLICE_142 ( .D1(\myvga.clk_60hz_N_290 ), 
    .C1(\myvga.clk_60hz_N_291 ), .B1(\row[1] ), .A1(\row[3] ), .D0(\myvga.n1 ), 
    .C0(\row[2] ), .F0(\myvga.clk_60hz_N_291 ), .F1(clk_60hz));
  myvga_SLICE_144 \myvga.SLICE_144 ( .D1(\myvga.n4746 ), 
    .C1(\myvga.n10_adj_299 ), .B1(\column[8] ), .D0(\column[1] ), 
    .C0(\column[3] ), .B0(\column[0] ), .A0(\column[7] ), 
    .F0(\myvga.n10_adj_299 ), .F1(n3007));
  myvga_SLICE_146 \myvga.SLICE_146 ( .D1(\myvga.n8 ), .C1(\myvga.n7 ), 
    .B1(\row[8] ), .A1(\row[9] ), .D0(\row[6] ), .C0(\row[0] ), .B0(\row[1] ), 
    .A0(\row[4] ), .F0(\myvga.n7 ), .F1(row_0__N_30));
  controller_SLICE_148 \controller.SLICE_148 ( .D1(\controller.counter[17] ), 
    .C1(\controller.n28 ), .B1(\controller.counter[14] ), 
    .A1(\controller.n3001 ), .D0(\controller.counter[12] ), 
    .C0(\controller.n4583 ), .B0(\controller.counter[13] ), 
    .A0(\controller.counter[11] ), .F0(\controller.n28 ), 
    .F1(\controller.n36 ));
  controller_SLICE_149 \controller.SLICE_149 ( .D1(\controller.n9_adj_298 ), 
    .C1(\controller.n4582 ), .B1(\controller.counter[8] ), 
    .A1(\controller.n10_adj_297 ), .D0(\controller.counter[9] ), 
    .C0(\controller.counter[10] ), .F0(\controller.n4582 ), 
    .F1(\controller.n4583 ));
  controller_SLICE_151 \controller.SLICE_151 ( .D1(\controller.counter[11] ), 
    .B1(\controller.counter[15] ), .C0(\controller.counter[16] ), 
    .A0(\controller.counter[15] ), .F0(\controller.n3001 ), 
    .F1(\controller.latch_c_N_288 ));
  controller_SLICE_152 \controller.SLICE_152 ( 
    .DI1(\controller.shift[6].sig_008.FeedThruLUT ), 
    .D1(\controller.shift[6] ), .D0(\controller.interimShift[1] ), 
    .C0(\controller.interimShift[7] ), .B0(\controller.shift[7] ), 
    .A0(\controller.shift[1] ), .CLK(clock_c), .Q1(\controller.shift[7] ), 
    .F0(\controller.n12 ), .F1(\controller.shift[6].sig_008.FeedThruLUT ));
  controller_SLICE_153 \controller.SLICE_153 ( .D1(\controller.n11 ), 
    .C1(\controller.n9 ), .B1(\controller.n10 ), .A1(\controller.n12 ), 
    .D0(\controller.shift[0] ), .C0(\controller.shift[6] ), 
    .B0(\controller.interimShift[0] ), .A0(\controller.interimShift[6] ), 
    .F0(\controller.n9 ), .F1(\controller.controllerOutput_0__N_62 ));
  controller_SLICE_154 \controller.SLICE_154 ( 
    .D0(\controller.interimShift[4] ), .C0(\controller.interimShift[2] ), 
    .B0(\controller.shift[2] ), .A0(\controller.shift[4] ), 
    .F0(\controller.n10 ));
  controller_SLICE_155 \controller.SLICE_155 ( .D1(\controller.n9 ), 
    .C1(\controller.n11 ), .B1(\controller.n10 ), .A1(\controller.n12 ), 
    .D0(\controller.shift[3] ), .C0(\controller.interimShift[5] ), 
    .B0(\controller.shift[5] ), .A0(\controller.interimShift[3] ), 
    .F0(\controller.n11 ), .F1(\controller.interimShift_0__N_244 ));
  controller_SLICE_157 \controller.SLICE_157 ( .D1(\controller.latch_c_N_288 ), 
    .C1(\controller.latch_c_N_287 ), .B1(\controller.counter[16] ), 
    .A1(\controller.counter[12] ), .D0(\controller.n4582 ), 
    .C0(\controller.counter[17] ), .B0(\controller.counter[14] ), 
    .A0(\controller.counter[13] ), .F0(\controller.latch_c_N_287 ), 
    .F1(latch_c));
  controller_SLICE_160 \controller.SLICE_160 ( .D1(\controller.counter[17] ), 
    .C1(\controller.clock_c_N_289 ), .B1(\controller.counter[14] ), 
    .A1(\controller.counter[8] ), .D0(\controller.counter[12] ), 
    .C0(\controller.counter[16] ), .B0(\controller.counter[13] ), 
    .A0(\controller.counter[15] ), .F0(\controller.clock_c_N_289 ), 
    .F1(clock_c));
  gamelogic_SLICE_162 \gamelogic.SLICE_162 ( .D1(\gamelogic.n191 ), 
    .C1(\gamelogic.n3627 ), .B1(\gamelogic.r_addy_11__N_110[5] ), 
    .A1(snake_y_1__N_267), .C0(\r_addy[3] ), .B0(\r_addy[4] ), 
    .A0(\r_addy[5] ), .F0(\gamelogic.n3627 ), .F1(snake_y_1__N_268));
  gamelogic_SLICE_163 \gamelogic.SLICE_163 ( .D1(\gamelogic.n3627 ), 
    .C1(\gamelogic.n191 ), .B1(\gamelogic.r_addy_11__N_110[5] ), 
    .A1(snake_y_1__N_267), .D0(\gamelogic.dir[1] ), .C0(\gamelogic.n3282 ), 
    .B0(\gamelogic.dir[0] ), .F0(\gamelogic.n191 ), .F1(\gamelogic.n2795 ));
  gamelogic_SLICE_164 \gamelogic.SLICE_164 ( .D1(\gamelogic.r_addy[11]_2 ), 
    .C1(\gamelogic.n31 ), .B1(\r_addy[8] ), .A1(\r_addy[7] ), 
    .D0(\gamelogic.r_addy[9]_2 ), .C0(\gamelogic.r_addy[10]_2 ), 
    .F0(\gamelogic.n31 ), .F1(\gamelogic.n3282 ));
  gamelogic_SLICE_166 \gamelogic.SLICE_166 ( .D0(w_data_1__N_106), 
    .C0(\gamelogic.n2795 ), .F0(\gamelogic.game_over_check_N_296 ));
  gamelogic_SLICE_167 \gamelogic.SLICE_167 ( .D1(\gamelogic.n2795 ), 
    .C1(w_data_1__N_106), .D0(\gamelogic.counter[2] ), 
    .C0(\gamelogic.counter[1] ), .B0(\gamelogic.counter[0] ), 
    .A0(\gamelogic.n3574 ), .F0(w_data_1__N_106), 
    .F1(\gamelogic.game_over_check_N_295 ));
  gamelogic_SLICE_168 \gamelogic.SLICE_168 ( .DI1(\gamelogic.dir_1__N_281 ), 
    .D1(\gamelogic.dir[1] ), .C1(\controllerOutput[1] ), .B1(n4591), 
    .A1(\controllerOutput[0] ), .C0(\gamelogic.dir[1] ), 
    .B0(\gamelogic.dir[0] ), .CLK(clk_60hz), .Q1(\gamelogic.dir[1] ), 
    .F0(\gamelogic.r_addy_11__N_110[5] ), .F1(\gamelogic.dir_1__N_281 ));
  gamelogic_SLICE_170 \gamelogic.SLICE_170 ( .D1(\gamelogic.n372 ), 
    .C1(\gamelogic.n209 ), .B1(\gamelogic.n373 ), .A1(\gamelogic.n206 ), 
    .D0(\gamelogic.countery[1] ), .C0(\gamelogic.countery[0] ), 
    .F0(\gamelogic.n209 ), .F1(\gamelogic.n4326 ));
  gamelogic_SLICE_172 \gamelogic.SLICE_172 ( .D1(\gamelogic.countery[4] ), 
    .C1(\gamelogic.n702 ), .B1(\gamelogic.countery[3] ), 
    .D0(\gamelogic.countery[2] ), .C0(\gamelogic.countery[0] ), 
    .B0(\gamelogic.countery[1] ), .F0(\gamelogic.n702 ), .F1(\gamelogic.n206 ));
  gamelogic_SLICE_173 \gamelogic.SLICE_173 ( .D0(\gamelogic.n702 ), 
    .C0(\gamelogic.n4326 ), .B0(\gamelogic.countery[3] ), 
    .A0(\gamelogic.countery[4] ), .F0(\gamelogic.n377 ));
  gamelogic_SLICE_174 \gamelogic.SLICE_174 ( .D1(\r_addy[8] ), 
    .C1(\gamelogic.r_addy[9]_2 ), .B1(\gamelogic.r_addy[11]_2 ), 
    .A1(\gamelogic.r_addy[10]_2 ), .D0(\gamelogic.r_addy[9]_2 ), 
    .C0(\gamelogic.r_addy[11]_2 ), .B0(\gamelogic.r_addy[10]_2 ), 
    .A0(\r_addy[8] ), .F0(\gamelogic.n166 ), .F1(\gamelogic.n4580 ));
  gamelogic_SLICE_178 \gamelogic.SLICE_178 ( .D1(\gamelogic.r_addy[11]_2 ), 
    .C1(\gamelogic.r_addy[10]_2 ), .A1(\r_addy[7] ), 
    .D0(\gamelogic.r_addy[10]_2 ), .C0(\gamelogic.r_addy[9]_2 ), 
    .B0(\r_addy[7] ), .A0(\gamelogic.r_addy[11]_2 ), .F0(\gamelogic.n4766 ), 
    .F1(\gamelogic.n4768 ));
  gamelogic_SLICE_180 \gamelogic.SLICE_180 ( .D1(\gamelogic.r_addy[11]_2 ), 
    .C1(\r_addy[7] ), .A1(\r_addy[8] ), .D0(\r_addy[7] ), 
    .C0(\gamelogic.r_addy[11]_2 ), .B0(\r_addy[8] ), .F0(\gamelogic.n4560 ), 
    .F1(\gamelogic.n4776 ));
  gamelogic_SLICE_182 \gamelogic.SLICE_182 ( .D0(\gamelogic.countery[2] ), 
    .C0(\gamelogic.countery[0] ), .B0(\gamelogic.countery[1] ), 
    .F0(\gamelogic.n373 ));
  gamelogic_SLICE_183 \gamelogic.SLICE_183 ( .D1(\gamelogic.countery[3] ), 
    .C1(\gamelogic.countery[2] ), .B1(\gamelogic.countery[0] ), 
    .A1(\gamelogic.countery[1] ), .D0(\gamelogic.countery[2] ), 
    .C0(\gamelogic.countery[0] ), .B0(\gamelogic.countery[1] ), 
    .F0(\gamelogic.n4018 ), .F1(\gamelogic.n372 ));
  controller_SLICE_184 \controller.SLICE_184 ( .D1(\controller.counter[3] ), 
    .C1(\controller.counter[6] ), .B1(\controller.counter[4] ), 
    .A1(\controller.counter[2] ), .D0(\controller.counter[5] ), 
    .C0(\controller.counter[7] ), .F0(\controller.n9_adj_298 ), 
    .F1(\controller.n10_adj_297 ));
  gamelogic_SLICE_187 \gamelogic.SLICE_187 ( .DI1(\snake_y_1__N_267$n0 ), 
    .D1(\gamelogic.counter[2] ), .C1(\gamelogic.counter[0] ), 
    .B1(\gamelogic.counter[1] ), .A1(\gamelogic.n3574 ), 
    .D0(\gamelogic.counter[4] ), .C0(\gamelogic.counter[2] ), 
    .A0(\gamelogic.counter[3] ), .CE(\gamelogic.w_data_1__N_105 ), 
    .LSR(w_data_1__N_106), .CLK(clk_60hz), .Q1(\w_data[1] ), 
    .F0(\gamelogic.n4748 ), .F1(\snake_y_1__N_267$n0 ));
  gamelogic_SLICE_189 \gamelogic.SLICE_189 ( .D1(\gamelogic.r_addy[10]_2 ), 
    .C1(r_addr_0__N_198), .B1(\row[8] ), .D0(\row[5] ), .C0(\row[7] ), 
    .B0(\row[6] ), .A0(\row[8] ), .F0(n4320), .F1(\r_addr[10] ));
  SLICE_190 SLICE_190( .D0(row_0__N_30), .C0(n3007), .B0(\column[6] ), 
    .A0(\column[5] ), .F0(row_0__N_29));
  SLICE_192 SLICE_192( .D1(\controllerOutput[1] ), .C1(\controllerOutput[0] ), 
    .B1(\controllerOutput[2] ), .A1(\controllerOutput[3] ), 
    .D0(\controllerOutput[3] ), .C0(\controllerOutput[2] ), .F0(n4591), 
    .F1(\gamelogic.dir_0__N_283 ));
  print_pat_SLICE_194 \print_pat.SLICE_194 ( 
    .D0(\print_pat.make_end_screen[3] ), .C0(\print_pat.n3088 ), 
    .B0(\print_pat.n587 ), .F0(\print_pat.n591 ));
  print_pat_SLICE_198 \print_pat.SLICE_198 ( 
    .D0(\print_pat.make_end_screen[5] ), .C0(\print_pat.n505[5] ), 
    .B0(\print_pat.n587 ), .F0(\print_pat.n593 ));
  SLICE_199 SLICE_199( .DI1(result_1__N_183), .D1(\s[0] ), .C1(n7), 
    .B1(\s[1] ), .A1(\controllerOutput[5] ), .D0(game_over_check), .C0(\s[1] ), 
    .B0(\result[1] ), .CLK(clk_25m), .Q1(\result[1] ), .F0(n7), 
    .F1(result_1__N_183));
  gamelogic_SLICE_202 \gamelogic.SLICE_202 ( .DI1(snake_x_2__N_254), 
    .D1(\snake_x[2] ), .C1(snake_x_3__N_253), .B1(snake_y_1__N_267), 
    .A1(\r_addy[2] ), .D0(\gamelogic.dir[1] ), .C0(\gamelogic.dir[0] ), 
    .B0(\gamelogic.n3627 ), .A0(snake_y_1__N_267), .CLK(clk_60hz), 
    .Q1(\snake_x[2] ), .F0(snake_x_3__N_253), .F1(snake_x_2__N_254));
  gamelogic_SLICE_203 \gamelogic.SLICE_203 ( .D1(\gamelogic.counterx[4] ), 
    .C1(snake_y_1__N_267), .A1(\r_addy[4] ), .D0(\gamelogic.counterx[1] ), 
    .C0(snake_y_1__N_267), .B0(\r_addy[1] ), .F0(\gamelogic.n261[1] ), 
    .F1(\gamelogic.n261[4] ));
  SLICE_206 SLICE_206( .F0(VCC_net));
  print_pat_SLICE_207 \print_pat.SLICE_207 ( .D1(\row[5] ), .C1(\r_addy[7] ), 
    .B1(r_addr_0__N_198), .D0(\row[6] ), .C0(\r_addy[8] ), 
    .A0(r_addr_0__N_198), .F0(\print_pat.r_addr[8] ), 
    .F1(\print_pat.r_addr[7] ));
  print_pat_SLICE_209 \print_pat.SLICE_209 ( .D1(\column[8] ), 
    .C1(\r_addy[4] ), .A1(r_addr_0__N_198), .D0(\row[4] ), .C0(\r_addy[6] ), 
    .B0(r_addr_0__N_198), .F0(\print_pat.r_addr[6] ), 
    .F1(\print_pat.r_addr[4] ));
  print_pat_SLICE_211 \print_pat.SLICE_211 ( .D1(\column[6] ), 
    .C1(\r_addy[2] ), .A1(r_addr_0__N_198), .D0(r_addr_0__N_198), 
    .C0(\column[7] ), .B0(\r_addy[3] ), .F0(\print_pat.r_addr[3] ), 
    .F1(\print_pat.r_addr[2] ));
  print_pat_SLICE_213 \print_pat.SLICE_213 ( .D1(\column[4] ), 
    .C1(\r_addy[0] ), .A1(r_addr_0__N_198), .D0(\column[5] ), .C0(\r_addy[1] ), 
    .B0(r_addr_0__N_198), .F0(\print_pat.r_addr[1] ), 
    .F1(\print_pat.r_addr[0] ));
  myvga_SLICE_217 \myvga.SLICE_217 ( .DI1(\myvga.vsync_N_293 ), 
    .D1(\myvga.n3442 ), .C1(vsync), .B1(\row[0] ), .A1(\row[4] ), 
    .D0(\row[4] ), .C0(\row[0] ), .CLK(clk_25m), .Q1(vsync), 
    .F0(\myvga.clk_60hz_N_290 ), .F1(\myvga.vsync_N_293 ));
  controller_SLICE_218 \controller.SLICE_218 ( .D0(\controller.counter[19] ), 
    .C0(\controller.n36 ), .B0(\controller.counter[20] ), 
    .A0(\controller.counter[18] ), .F0(\controller.counter_2__N_236 ));
  gamelogic_SLICE_220 \gamelogic.SLICE_220 ( 
    .DI1(\gamelogic.counterx_5__N_270[5] ), .D1(\gamelogic.n257 ), 
    .C1(\gamelogic.n258 ), .B1(\gamelogic.n255 ), .A1(\gamelogic.n256 ), 
    .D0(\gamelogic.counterx[5] ), .C0(\r_addy[5] ), .B0(snake_y_1__N_267), 
    .CLK(clk_60hz), .Q1(\gamelogic.counterx[5] ), .F0(\gamelogic.n261[5] ), 
    .F1(\gamelogic.counterx_5__N_270[5] ));
  gamelogic_SLICE_221 \gamelogic.SLICE_221 ( .DI1(\r_addr[11] ), 
    .D1(\gamelogic.r_addy[11]_2 ), .C1(r_addr_0__N_198), .B1(\row[9] ), 
    .D0(\r_addy[7] ), .C0(\gamelogic.r_addy[11]_2 ), .CLK(clk_25m), 
    .Q1(\print_pat.ram_mod.r_data_out_0__N_182 ), .F0(\gamelogic.n5421 ), 
    .F1(\r_addr[11] ));
  gamelogic_SLICE_222 \gamelogic.SLICE_222 ( .DI1(snake_y_0__N_269), 
    .D1(\snake_y[0] ), .C1(snake_y_1__N_268), .B1(\r_addy[6] ), 
    .A1(snake_y_1__N_267), .D0(\gamelogic.countery[0] ), .C0(\r_addy[6] ), 
    .B0(snake_y_1__N_267), .CLK(clk_60hz), .Q1(\snake_y[0] ), 
    .F0(\gamelogic.n261[6] ), .F1(snake_y_0__N_269));
  gamelogic_SLICE_223 \gamelogic.SLICE_223 ( .D1(\gamelogic.countery[2] ), 
    .C1(snake_y_1__N_267), .B1(\r_addy[8] ), .D0(\gamelogic.countery[1] ), 
    .C0(\r_addy[7] ), .B0(snake_y_1__N_267), .F0(\gamelogic.n261[7] ), 
    .F1(\gamelogic.n261[8] ));
  gamelogic_SLICE_224 \gamelogic.SLICE_224 ( .D1(\gamelogic.dir[0] ), 
    .C1(\gamelogic.dir[1] ), .D0(\gamelogic.dir[1] ), .C0(\gamelogic.dir[0] ), 
    .F0(\gamelogic.r_addy_5__N_143[5] ), .F1(\gamelogic.r_addy_0__N_172 ));
  gamelogic_SLICE_226 \gamelogic.SLICE_226 ( .D1(snake_y_1__N_267), 
    .C1(\gamelogic.counterx[0] ), .A1(\r_addy[0] ), 
    .D0(\gamelogic.countery[3] ), .C0(\gamelogic.r_addy[9]_2 ), 
    .A0(snake_y_1__N_267), .F0(\gamelogic.n261[9] ), .F1(\gamelogic.n261[0] ));
  gamelogic_SLICE_228 \gamelogic.SLICE_228 ( 
    .DI1(\gamelogic.countery_4__N_276[4] ), .D1(\gamelogic.n372 ), 
    .C1(\gamelogic.n206 ), .B1(\gamelogic.n377 ), .A1(\gamelogic.n4018 ), 
    .D0(snake_y_1__N_267), .C0(\gamelogic.countery[4] ), 
    .A0(\gamelogic.r_addy[10]_2 ), .CLK(clk_60hz), 
    .Q1(\gamelogic.countery[4] ), .F0(\gamelogic.n261[10] ), 
    .F1(\gamelogic.countery_4__N_276[4] ));
  gamelogic_SLICE_230 \gamelogic.SLICE_230 ( .D0(w_data_1__N_106), .C0(n4594), 
    .F0(\gamelogic.w_data_1__N_105 ));
  gamelogic_SLICE_232 \gamelogic.SLICE_232 ( .DI1(\gamelogic.w_addr_11__N_81 ), 
    .D1(\gamelogic.w_data_1__N_105 ), .C1(\gamelogic.r_addy[11]_2 ), 
    .B1(snake_y_1__N_267), .A1(\w_addr[11] ), .D0(\w_addr[11] ), 
    .CLK(clk_60hz), .Q1(\w_addr[11] ), .F0(n674), 
    .F1(\gamelogic.w_addr_11__N_81 ));
  gamelogic_SLICE_234 \gamelogic.SLICE_234 ( .D1(\gamelogic.r_addy[9]_2 ), 
    .C1(\r_addy[8] ), .B1(\gamelogic.r_addy[10]_2 ), .D0(r_addr_0__N_198), 
    .C0(\gamelogic.r_addy[9]_2 ), .A0(\row[7] ), .F0(\r_addr[9] ), 
    .F1(\gamelogic.n19 ));
  gamelogic_SLICE_236 \gamelogic.SLICE_236 ( .DI1(\gamelogic.dir_0__N_282[0] ), 
    .C1(\controllerOutput[0] ), .A1(\controllerOutput[3] ), 
    .D0(\gamelogic.dir[1] ), .C0(\gamelogic.dir[0] ), 
    .CE(\gamelogic.dir_0__N_283 ), .LSR(\controllerOutput[1] ), .CLK(clk_60hz), 
    .Q1(\gamelogic.dir[0] ), .F0(\gamelogic.r_addy_6__N_139 ), 
    .F1(\gamelogic.dir_0__N_282[0] ));
  gamelogic_SLICE_237 \gamelogic.SLICE_237 ( .D1(\r_addy[3] ), 
    .C1(\gamelogic.counterx[3] ), .B1(snake_y_1__N_267), 
    .D0(\gamelogic.counterx[2] ), .C0(snake_y_1__N_267), .B0(\r_addy[2] ), 
    .F0(\gamelogic.n261[2] ), .F1(\gamelogic.n261[3] ));
  fsm_control_SLICE_240 \fsm_control.SLICE_240 ( .DI1(s_1__N_284), .D1(\s[0] ), 
    .C1(game_over_check), .B1(\s[1] ), .A1(\controllerOutput[5] ), .C0(\s[1] ), 
    .CLK(clk_25m), .Q1(\s[1] ), .F0(\fsm_control.s_0__N_286 ), .F1(s_1__N_284));
  fsm_control_SLICE_241 \fsm_control.SLICE_241 ( 
    .DI1(\fsm_control.s_0__N_285[0] ), .D1(\s[0] ), .C1(\s[1] ), 
    .B1(game_over_check), .A1(\controllerOutput[7] ), .D0(\s[1] ), .C0(\s[0] ), 
    .CE(\fsm_control.s_0__N_286 ), .CLK(clk_25m), .Q1(\s[0] ), 
    .F0(\fsm_control.result_0__N_185 ), .F1(\fsm_control.s_0__N_285[0] ));
  rgb_5__I_0 rgb_5__I_0( .DO0(\rgb[5] ), .OUTCLK(clk_25m), .PADDO(rgb_out_c_5));
  rgb_0__I_0 rgb_0__I_0( .DO0(\rgb[0] ), .OUTCLK(clk_25m), .PADDO(rgb_out_c_0));
  print_pat_start_draw_screen_row_4__I_0_3 
    \print_pat.start_draw_screen.row_4__I_0_3 ( .RADDR10(\column[9] ), 
    .RADDR9(\column[8] ), .RADDR8(\column[7] ), .RADDR7(\column[6] ), 
    .RADDR6(\column[5] ), .RADDR5(\column[4] ), .RADDR4(\row[8] ), 
    .RADDR3(\row[7] ), .RADDR2(\row[6] ), .RADDR1(\row[5] ), .RADDR0(\row[4] ), 
    .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), 
    .RDATA11(\print_pat.make_start_screen[3] ), 
    .RDATA3(\print_pat.make_start_screen[2] ));
  print_pat_start_draw_screen_row_4__I_0_4 
    \print_pat.start_draw_screen.row_4__I_0_4 ( .RADDR10(\column[9] ), 
    .RADDR9(\column[8] ), .RADDR8(\column[7] ), .RADDR7(\column[6] ), 
    .RADDR6(\column[5] ), .RADDR5(\column[4] ), .RADDR4(\row[8] ), 
    .RADDR3(\row[7] ), .RADDR2(\row[6] ), .RADDR1(\row[5] ), .RADDR0(\row[4] ), 
    .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), 
    .RDATA11(\print_pat.make_start_screen[1] ), 
    .RDATA3(\print_pat.make_start_screen[0] ));
  print_pat_start_draw_screen_row_4__I_0_2 
    \print_pat.start_draw_screen.row_4__I_0_2 ( .RADDR10(\column[9] ), 
    .RADDR9(\column[8] ), .RADDR8(\column[7] ), .RADDR7(\column[6] ), 
    .RADDR6(\column[5] ), .RADDR5(\column[4] ), .RADDR4(\row[8] ), 
    .RADDR3(\row[7] ), .RADDR2(\row[6] ), .RADDR1(\row[5] ), .RADDR0(\row[4] ), 
    .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), 
    .RDATA11(\print_pat.make_start_screen[5] ), 
    .RDATA3(\print_pat.make_start_screen[4] ));
  print_pat_snake_draw_alive_row_0__I_0_2 
    \print_pat.snake_draw_alive.row_0__I_0_2 ( .RADDR7(\column[3] ), 
    .RADDR6(\column[2] ), .RADDR5(\column[1] ), .RADDR4(\column[0] ), 
    .RADDR3(\row[3] ), .RADDR2(\row[2] ), .RADDR1(\row[1] ), .RADDR0(\row[0] ), 
    .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), 
    .RDATA10(\print_pat.color_snake_alive[5] ), 
    .RDATA8(\print_pat.color_snake_alive[4] ), 
    .RDATA6(\print_pat.color_snake_alive[3] ), 
    .RDATA4(\print_pat.color_snake_alive[2] ), 
    .RDATA2(\print_pat.color_snake_alive[1] ), 
    .RDATA0(\print_pat.color_snake_alive[0] ));
  print_pat_ram_mod_mem2 \print_pat.ram_mod.mem2 ( .RADDR10(\r_addr[10] ), 
    .RADDR9(\r_addr[9] ), .RADDR8(\print_pat.r_addr[8] ), 
    .RADDR7(\print_pat.r_addr[7] ), .RADDR6(\print_pat.r_addr[6] ), 
    .RADDR5(\print_pat.r_addr[5] ), .RADDR4(\print_pat.r_addr[4] ), 
    .RADDR3(\print_pat.r_addr[3] ), .RADDR2(\print_pat.r_addr[2] ), 
    .RADDR1(\print_pat.r_addr[1] ), .RADDR0(\print_pat.r_addr[0] ), 
    .WADDR10(\w_addr[10] ), .WADDR9(\w_addr[9] ), .WADDR8(\w_addr[8] ), 
    .WADDR7(\w_addr[7] ), .WADDR6(\w_addr[6] ), .WADDR5(\w_addr[5] ), 
    .WADDR4(\w_addr[4] ), .WADDR3(\w_addr[3] ), .WADDR2(\w_addr[2] ), 
    .WADDR1(\w_addr[1] ), .WADDR0(\w_addr[0] ), .RCLKE(VCC_net), 
    .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), .WCLK(clk_25m), .WE(n674), 
    .RDATA3(\print_pat.ram_mod.r_data_out_2__N_174 ));
  print_pat_ram_mod_mem0 \print_pat.ram_mod.mem0 ( .RADDR10(\r_addr[10] ), 
    .RADDR9(\r_addr[9] ), .RADDR8(\print_pat.r_addr[8] ), 
    .RADDR7(\print_pat.r_addr[7] ), .RADDR6(\print_pat.r_addr[6] ), 
    .RADDR5(\print_pat.r_addr[5] ), .RADDR4(\print_pat.r_addr[4] ), 
    .RADDR3(\print_pat.r_addr[3] ), .RADDR2(\print_pat.r_addr[2] ), 
    .RADDR1(\print_pat.r_addr[1] ), .RADDR0(\print_pat.r_addr[0] ), 
    .WADDR10(\w_addr[10] ), .WADDR9(\w_addr[9] ), .WADDR8(\w_addr[8] ), 
    .WADDR7(\w_addr[7] ), .WADDR6(\w_addr[6] ), .WADDR5(\w_addr[5] ), 
    .WADDR4(\w_addr[4] ), .WADDR3(\w_addr[3] ), .WADDR2(\w_addr[2] ), 
    .WADDR1(\w_addr[1] ), .WADDR0(\w_addr[0] ), .WDATA11(\w_data[1] ), 
    .WDATA3(\w_data[0] ), .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(clk_25m), .WE(\w_addr[11] ), 
    .RDATA11(\print_pat.ram_mod.r_data_out_1__N_178 ), 
    .RDATA3(\print_pat.ram_mod.r_data_out_0__N_181 ));
  print_pat_ram_mod_mem3 \print_pat.ram_mod.mem3 ( .RADDR10(\r_addr[10] ), 
    .RADDR9(\r_addr[9] ), .RADDR8(\print_pat.r_addr[8] ), 
    .RADDR7(\print_pat.r_addr[7] ), .RADDR6(\print_pat.r_addr[6] ), 
    .RADDR5(\print_pat.r_addr[5] ), .RADDR4(\print_pat.r_addr[4] ), 
    .RADDR3(\print_pat.r_addr[3] ), .RADDR2(\print_pat.r_addr[2] ), 
    .RADDR1(\print_pat.r_addr[1] ), .RADDR0(\print_pat.r_addr[0] ), 
    .WADDR10(\w_addr[10] ), .WADDR9(\w_addr[9] ), .WADDR8(\w_addr[8] ), 
    .WADDR7(\w_addr[7] ), .WADDR6(\w_addr[6] ), .WADDR5(\w_addr[5] ), 
    .WADDR4(\w_addr[4] ), .WADDR3(\w_addr[3] ), .WADDR2(\w_addr[2] ), 
    .WADDR1(\w_addr[1] ), .WADDR0(\w_addr[0] ), .RCLKE(VCC_net), 
    .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), .WCLK(clk_25m), 
    .WE(\w_addr[11] ), .RDATA3(\print_pat.ram_mod.r_data_out_2__N_175 ));
  print_pat_ram_mod_mem1 \print_pat.ram_mod.mem1 ( .RADDR10(\r_addr[10] ), 
    .RADDR9(\r_addr[9] ), .RADDR8(\print_pat.r_addr[8] ), 
    .RADDR7(\print_pat.r_addr[7] ), .RADDR6(\print_pat.r_addr[6] ), 
    .RADDR5(\print_pat.r_addr[5] ), .RADDR4(\print_pat.r_addr[4] ), 
    .RADDR3(\print_pat.r_addr[3] ), .RADDR2(\print_pat.r_addr[2] ), 
    .RADDR1(\print_pat.r_addr[1] ), .RADDR0(\print_pat.r_addr[0] ), 
    .WADDR10(\w_addr[10] ), .WADDR9(\w_addr[9] ), .WADDR8(\w_addr[8] ), 
    .WADDR7(\w_addr[7] ), .WADDR6(\w_addr[6] ), .WADDR5(\w_addr[5] ), 
    .WADDR4(\w_addr[4] ), .WADDR3(\w_addr[3] ), .WADDR2(\w_addr[2] ), 
    .WADDR1(\w_addr[1] ), .WADDR0(\w_addr[0] ), .WDATA11(\w_data[1] ), 
    .WDATA3(\w_data[0] ), .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(clk_25m), .WE(n674), 
    .RDATA11(\print_pat.ram_mod.r_data_out_1__N_177 ), 
    .RDATA3(\print_pat.ram_mod.r_data_out_0__N_180 ));
  print_pat_end_game_rom_screen_row_4__I_0_6 
    \print_pat.end_game_rom_screen.row_4__I_0_6 ( .RADDR10(\column[9] ), 
    .RADDR9(\column[8] ), .RADDR8(\column[7] ), .RADDR7(\column[6] ), 
    .RADDR6(\column[5] ), .RADDR5(\column[4] ), .RADDR4(\row[8] ), 
    .RADDR3(\row[7] ), .RADDR2(\row[6] ), .RADDR1(\row[5] ), .RADDR0(\row[4] ), 
    .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), 
    .RDATA11(\print_pat.make_end_screen[3] ), 
    .RDATA3(\print_pat.make_end_screen[2] ));
  print_pat_end_game_rom_screen_row_4__I_0 
    \print_pat.end_game_rom_screen.row_4__I_0 ( .RADDR10(\column[9] ), 
    .RADDR9(\column[8] ), .RADDR8(\column[7] ), .RADDR7(\column[6] ), 
    .RADDR6(\column[5] ), .RADDR5(\column[4] ), .RADDR4(\row[8] ), 
    .RADDR3(\row[7] ), .RADDR2(\row[6] ), .RADDR1(\row[5] ), .RADDR0(\row[4] ), 
    .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), 
    .RDATA11(\print_pat.make_end_screen[1] ), 
    .RDATA3(\print_pat.make_end_screen[0] ));
  print_pat_end_game_rom_screen_row_4__I_0_5 
    \print_pat.end_game_rom_screen.row_4__I_0_5 ( .RADDR10(\column[9] ), 
    .RADDR9(\column[8] ), .RADDR8(\column[7] ), .RADDR7(\column[6] ), 
    .RADDR6(\column[5] ), .RADDR5(\column[4] ), .RADDR4(\row[8] ), 
    .RADDR3(\row[7] ), .RADDR2(\row[6] ), .RADDR1(\row[5] ), .RADDR0(\row[4] ), 
    .RCLKE(VCC_net), .RCLK(clk_25m), .RE(VCC_net), .WCLKE(VCC_net), 
    .RDATA11(\print_pat.make_end_screen[5] ), 
    .RDATA3(\print_pat.make_end_screen[4] ));
  print_pat_apple_draw_row_0__I_0 \print_pat.apple_draw.row_0__I_0 ( 
    .RADDR7(\column[3] ), .RADDR6(\column[2] ), .RADDR5(\column[1] ), 
    .RADDR4(\column[0] ), .RADDR3(\row[3] ), .RADDR2(\row[2] ), 
    .RADDR1(\row[1] ), .RADDR0(\row[0] ), .RCLKE(VCC_net), .RCLK(clk_25m), 
    .RE(VCC_net), .WCLKE(VCC_net), .RDATA10(\print_pat.color_apple[5] ), 
    .RDATA8(\print_pat.color_apple[4] ), .RDATA6(\print_pat.color_apple[3] ), 
    .RDATA4(\print_pat.color_apple[2] ), .RDATA2(\print_pat.color_apple[1] ), 
    .RDATA0(\print_pat.color_apple[0] ));
  pll_lscc_pll_inst_u_PLL_B \pll.lscc_pll_inst.u_PLL_B ( 
    .REFERENCECLK(clk_in_12m_c), .FEEDBACK(\pll.lscc_pll_inst.feedback_w ), 
    .RESET_N(VCC_net), .INTFBOUT(\pll.lscc_pll_inst.feedback_w ), 
    .OUTGLOBAL(clk_25m));
  rgb_1__I_0 rgb_1__I_0( .DO0(\rgb[1] ), .OUTCLK(clk_25m), .PADDO(rgb_out_c_1));
  rgb_2__I_0 rgb_2__I_0( .DO0(\rgb[2] ), .OUTCLK(clk_25m), .PADDO(rgb_out_c_2));
  rgb_3__I_0 rgb_3__I_0( .DO0(\rgb[3] ), .OUTCLK(clk_25m), .PADDO(rgb_out_c_3));
  rgb_4__I_0 rgb_4__I_0( .DO0(\rgb[4] ), .OUTCLK(clk_25m), .PADDO(rgb_out_c_4));
  hsync_I_0 hsync_I_0( .DO0(hsync), .OUTCLK(clk_25m), .PADDO(HSYNC_out_c));
  controller_data_c_I_0 \controller.data_c_I_0 ( .PADDI(data_c), 
    .INCLK(clock_c), .DI0(\controller.shift[0] ));
  gamelogic_counter_0__I_0 \gamelogic.counter_0__I_0 ( 
    .RADDR4(\gamelogic.counter[4] ), .RADDR3(\gamelogic.counter[3] ), 
    .RADDR2(\gamelogic.counter[2] ), .RADDR1(\gamelogic.counter[1] ), 
    .RADDR0(\gamelogic.counter[0] ), .RCLKE(VCC_net), .RCLK(clk_60hz), 
    .RE(VCC_net), .WCLKE(VCC_net), .RDATA8(\gamelogic.counter[4] ), 
    .RDATA6(\gamelogic.counter[3] ), .RDATA4(\gamelogic.counter[2] ), 
    .RDATA2(\gamelogic.counter[1] ), .RDATA0(\gamelogic.counter[0] ));
  vsync_I_0 vsync_I_0( .DO0(vsync), .OUTCLK(clk_25m), .PADDO(VSYNC_out_c));
  data data_I( .PADDI(data_c), .data(data));
  clk_in_12m clk_in_12m_I( .PADDI(clk_in_12m_c), .clk_in_12m(clk_in_12m));
  clock clock_I( .PADDO(clock_c), .clock(clock));
  latch latch_I( .PADDO(latch_c), .latch(latch));
  rgb_out_0_ \rgb_out[0]_I ( .PADDO(rgb_out_c_0), .rgbout0(rgb_out[0]));
  rgb_out_1_ \rgb_out[1]_I ( .PADDO(rgb_out_c_1), .rgbout1(rgb_out[1]));
  rgb_out_2_ \rgb_out[2]_I ( .PADDO(rgb_out_c_2), .rgbout2(rgb_out[2]));
  rgb_out_3_ \rgb_out[3]_I ( .PADDO(rgb_out_c_3), .rgbout3(rgb_out[3]));
  rgb_out_4_ \rgb_out[4]_I ( .PADDO(rgb_out_c_4), .rgbout4(rgb_out[4]));
  rgb_out_5_ \rgb_out[5]_I ( .PADDO(rgb_out_c_5), .rgbout5(rgb_out[5]));
  VSYNC_out VSYNC_out_I( .PADDO(VSYNC_out_c), .VSYNC_out(VSYNC_out));
  HSYNC_out HSYNC_out_I( .PADDO(HSYNC_out_c), .HSYNC_out(HSYNC_out));
endmodule

module myvga_SLICE_0 ( input DI0, D1, D0, B0, CE, LSR, CLK, CIN0, CIN1, 
    output Q0, F0, COUT0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  fa2 \myvga/add_8_add_5_11 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/row_9__I_0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module fa2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI0, CI1, output S0, S1, 
    CO0, CO1 );

  FA2 inst1( .A0(A0), .B0(B0), .C0(C0), .D0(D0), .CI0(CI0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .CI1(CI1), .CO0(CO0), .CO1(CO1), .S0(S0), .S1(S1));
  defparam inst1.INIT0 = "0xc33c";
  defparam inst1.INIT1 = "0xc33c";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ffsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module myvga_SLICE_1 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 \myvga/add_8_add_5_9 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/row_9__I_2 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  ffsre2 \myvga/row_9__I_1 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_2 ( input DI1, D1, C1, B1, LSR, CLK, CIN1, output Q1, F1, 
    COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  fa2 \myvga/column_count_235_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(VCCI), .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), 
    .S0(), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \myvga/column_9__I_18 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module myvga_SLICE_3 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 \myvga/add_8_add_5_7 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/row_9__I_4 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  ffsre2 \myvga/row_9__I_3 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_4 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 \myvga/add_8_add_5_5 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/row_9__I_6 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  ffsre2 \myvga/row_9__I_5 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_5 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 \myvga/add_8_add_5_3 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/row_9__I_8 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  ffsre2 \myvga/row_9__I_7 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_6 ( input DI1, D1, C1, B1, CE, LSR, CLK, CIN1, output Q1, 
    F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  fa2 \myvga/add_8_add_5_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \myvga/row_9__I_9 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_7 ( input DI0, D1, D0, C0, LSR, CLK, CIN0, CIN1, output Q0, 
    F0, COUT0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  fa2 \myvga/column_count_235_add_4_11 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/column_9__I_0 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_8 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \myvga/column_count_235_add_4_9 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/column_9__I_11 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \myvga/column_9__I_10 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_9 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \myvga/column_count_235_add_4_7 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/column_9__I_13 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \myvga/column_9__I_12 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_10 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \myvga/column_count_235_add_4_5 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/column_9__I_15 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \myvga/column_9__I_14 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module myvga_SLICE_11 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \myvga/column_count_235_add_4_3 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/column_9__I_17 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \myvga/column_9__I_16 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_12 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_15 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_44 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_43 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_13 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_3 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_236__i2 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_55 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_14 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_17 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_42 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_41 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_15 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_13 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_46 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_45 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_16 ( input DI1, D1, C1, B1, LSR, CLK, CIN1, output Q1, 
    F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(VCCI), .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), 
    .S0(), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_236__i1 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_17 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_19 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_40 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_39 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_18 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_11 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_48 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_47 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_19 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_9 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_50 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_49 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_20 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_7 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_52 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_51 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_21 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_21 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_38 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module controller_SLICE_22 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \controller/counter_236_add_4_5 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \controller/counter_20__I_54 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/counter_20__I_53 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module gamelogic_SLICE_23 ( input D1, C1, B1, D0, C0, B0, CIN0, CIN1, output 
    F0, F1, COUT1, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/r_addy_8__I_0_2 ( .A0(GNDI), .B0(B0), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_24 ( input D1, C1, B1, B0, CIN1, output F1, COUT1, 
    COUT0 );
  wire   GNDI, VCCI;

  fa2 \gamelogic/r_addy_6__I_0_2 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_25 ( input D1, D0, B0, CIN0, CIN1, output F0, F1, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/add_132_add_5_7 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_26 ( input D1, B1, D0, B0, CIN0, CIN1, output F0, F1, 
    COUT1, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/add_132_add_5_5 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_27 ( input DI1, DI0, D1, B1, D0, B0, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  fa2 \gamelogic/add_132_add_5_3 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/counterx_1__I_0 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \gamelogic/counterx_2__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module gamelogic_SLICE_28 ( input DI1, D1, C1, B1, CLK, CIN1, output Q1, F1, 
    COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  fa2 \gamelogic/add_132_add_5_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \gamelogic/counterx_0__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module gamelogic_SLICE_29 ( input D1, D0, C0, B0, CIN0, CIN1, output F0, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/r_addy_5__I_0_2 ( .A0(GNDI), .B0(B0), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_30 ( input D1, C1, B1, D0, C0, B0, CIN0, CIN1, output 
    F0, F1, COUT1, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/r_addy_4__I_0_2 ( .A0(GNDI), .B0(B0), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_31 ( input D1, C1, B1, D0, C0, B0, CIN0, CIN1, output 
    F0, F1, COUT1, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/r_addy_2__I_0_2 ( .A0(GNDI), .B0(B0), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_32 ( input D1, C1, B1, B0, CIN1, output F1, COUT1, 
    COUT0 );
  wire   GNDI, VCCI;

  fa2 \gamelogic/r_addy_0__I_0_2 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_33 ( input D1, D0, C0, CIN0, CIN1, output F0, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/r_addy_11__I_0_2 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_34 ( input D1, C1, B1, D0, C0, B0, CIN0, CIN1, output 
    F0, F1, COUT1, COUT0 );
  wire   GNDI;

  fa2 \gamelogic/r_addy_10__I_0_2 ( .A0(GNDI), .B0(B0), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
  endspecify

endmodule

module print_pat_SLICE_35 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    LSR, CLK, output Q0, Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut4 \print_pat/mux_21_i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40001 \print_pat/i27_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \print_pat/rgb_5__I_27 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \print_pat/rgb_0__I_0_2 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  LUT4 #("0xABA8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40001 ( input A, B, C, D, output Z );

  LUT4 #("0xF1E0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_37 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    LSR, CLK, output Q0, Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40002 \print_pat/mux_21_i4_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40003 \print_pat/mux_21_i3_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \print_pat/rgb_5__I_25 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \print_pat/rgb_5__I_26 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40002 ( input A, B, C, D, output Z );

  LUT4 #("0xF1E0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40003 ( input A, B, C, D, output Z );

  LUT4 #("0xCCCA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_38 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    LSR, CLK, output Q0, Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40002 \print_pat/mux_21_i6_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40003 \print_pat/mux_21_i5_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \print_pat/rgb_5__I_0_2 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \print_pat/rgb_5__I_24 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module print_pat_snake_dumpy_SLICE_40 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, 
    B0, A0, CLK, output Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40004 i2421_4_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40005 \print_pat/snake_dumpy/i3981_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \myvga/hsync_I_61 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \print_pat/snake_dumpy/draw_dumpy_5__I_0 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40004 ( input A, B, C, D, output Z );

  LUT4 #("0xF0E8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40005 ( input A, B, C, D, output Z );

  LUT4 #("0x524A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_45 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40006 \controller/inv_12_i2_1_lut ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 \controller/inv_12_i1_1_lut ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/controllerOutput_7__I_22 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  ffsre2 \controller/controllerOutput_7__I_23 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  LUT4 #("0x00FF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40007 ( input A, B, C, D, output Z );

  LUT4 #("0x00FF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_46 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40008 \controller.SLICE_46_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \controller.SLICE_46_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/shift_1__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \controller/shift_0__I_0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_47 ( input DI1, DI0, D1, C0, CE, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40008 \controller.SLICE_47_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \controller.SLICE_47_K0 ( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  ffsre2 \controller/shift_6__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \controller/shift_7__I_0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_49 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40008 \controller.SLICE_49_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \controller.SLICE_49_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/shift_4__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \controller/shift_5__I_0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module controller_SLICE_51 ( input DI1, DI0, C1, D0, CE, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40011 \controller.SLICE_51_K1 ( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \controller.SLICE_51_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/shift_2__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \controller/shift_3__I_0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40011 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_54 ( input DI1, DI0, D1, C0, CE, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40006 \controller/inv_12_i6_1_lut ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40012 \controller/inv_12_i8_1_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  ffsre2 \controller/controllerOutput_7__I_19 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  ffsre2 \controller/controllerOutput_7__I_0 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  LUT4 #("0x0F0F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_56 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40006 \controller/inv_12_i3_1_lut ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 \controller/inv_12_i4_1_lut ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/controllerOutput_7__I_21 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  ffsre2 \controller/controllerOutput_7__I_20 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module controller_SLICE_60 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40008 \controller.SLICE_60_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \controller.SLICE_60_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/shift_4__I_0_2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/shift_5__I_0_2 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module controller_SLICE_62 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40008 \controller.SLICE_62_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \controller.SLICE_62_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/shift_2__I_0_2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/shift_3__I_0_2 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module controller_SLICE_64 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40008 \controller.SLICE_64_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \controller.SLICE_64_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  ffsre2 \controller/shift_0__I_0_2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \controller/shift_1__I_0_2 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module gamelogic_SLICE_66 ( input DI1, DI0, D1, C1, B1, C0, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40013 \gamelogic/i3403_2_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40012 \gamelogic/i274_1_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  ffsre2 \gamelogic/countery_4__I_60 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \gamelogic/countery_0__I_0 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  LUT4 #("0xC33C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_67 ( input DI1, DI0, D1, C1, B1, D0, C0, A0, CE, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40014 \gamelogic/mux_62_i2_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \gamelogic/mux_62_i1_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/w_addr_10__I_36 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \gamelogic/w_addr_10__I_37 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  LUT4 #("0xF3C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40015 ( input A, B, C, D, output Z );

  LUT4 #("0xF5A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_68 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, CE, 
    LSR, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \gamelogic/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \gamelogic/i3402_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre20018 \gamelogic/snake_y_2__I_0 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  ffsre2 \gamelogic/snake_y_1__I_0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  LUT4 #("0xCE4E") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  LUT4 #("0x330C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module ffsre20018 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "SET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module gamelogic_SLICE_70 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    LSR, CLK, output Q0, Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40019 \gamelogic/i23_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 \gamelogic/i31_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre20018 \gamelogic/snake_y_4__I_0 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  ffsre20018 \gamelogic/snake_y_3__I_0 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  LUT4 #("0x62EA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  LUT4 #("0x5CFC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_73 ( input DI1, DI0, D1, C1, B1, D0, C0, A0, CE, LSR, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40021 \gamelogic.mod_45_i145_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \gamelogic.i1_2_lut_adj_66 ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/snake_x_4__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \gamelogic/snake_x_4__I_56 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  LUT4 #("0xF030") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  LUT4 #("0x5A50") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_75 ( input DI0, D0, C0, A0, CE, LSR, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40023 \gamelogic/i1_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre20018 \gamelogic/snake_x_5__I_0 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  LUT4 #("0x000A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_76 ( input DI0, D0, C0, B0, A0, CE, LSR, CLK, output Q0, 
    F0 );
  wire   DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40024 \gamelogic.i1_2_lut_adj_65 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre20018 \gamelogic/game_over_check_I_0 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  LUT4 #("0xFAF8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_77 ( input DI0, D0, C0, B0, CLK, output Q0, F0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40025 i2429_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/w_data_0__I_0 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  LUT4 #("0x00FC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_81 ( input DI0, D0, C0, B0, CE, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40026 \gamelogic/mux_62_i11_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/w_addr_10__I_0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  LUT4 #("0xF3C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_82 ( input DI1, DI0, D1, C1, A1, D0, C0, B0, CE, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40027 \gamelogic/mux_62_i9_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \gamelogic/mux_62_i10_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/w_addr_10__I_29 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \gamelogic/w_addr_10__I_28 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  LUT4 #("0xF5A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_84 ( input DI1, DI0, D1, C1, A1, D0, C0, B0, CE, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40027 \gamelogic/mux_62_i7_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 \gamelogic/mux_62_i8_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/w_addr_10__I_31 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \gamelogic/w_addr_10__I_30 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  LUT4 #("0xCCF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_86 ( input DI1, DI0, D1, C1, A1, D0, C0, B0, CE, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40027 \gamelogic/mux_62_i5_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \gamelogic/mux_62_i6_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/w_addr_10__I_33 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \gamelogic/w_addr_10__I_32 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  LUT4 #("0xF0CC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_88 ( input DI1, DI0, D1, C1, B1, D0, C0, A0, CE, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40014 \gamelogic/mux_62_i3_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \gamelogic/mux_62_i4_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/w_addr_10__I_35 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \gamelogic/w_addr_10__I_34 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module gamelogic_SLICE_92 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, 
    CLK, output Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40030 \gamelogic.i4046_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40031 \gamelogic/mod_32_i282_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/countery_4__I_59 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/countery_4__I_58 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  LUT4 #("0x1E78") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40031 ( input A, B, C, D, output Z );

  LUT4 #("0x956A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_96 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, 
    CLK, output Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40032 \gamelogic/i1_4_lut_adj_69 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40033 \gamelogic/mod_30_i293_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/counterx_3__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/counterx_5__I_57 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  LUT4 #("0x5294") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  LUT4 #("0x581A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_99 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40034 i2423_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40035 i2427_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \gamelogic/snake_x_1__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/snake_x_0__I_0 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  LUT4 #("0xEEFC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  LUT4 #("0xEFEA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_106 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40036 \print_pat/ram_mod/r_data_out_1__I_0 ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40037 \print_pat/mux_158_Mux_0_i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  LUT4 #("0xAFA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  LUT4 #("0xFD31") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_107 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40038 \print_pat/i29_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 \print_pat.i28_3_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  LUT4 #("0xF3C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  LUT4 #("0x3704") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_108 ( input D1, C1, B1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40040 \myvga/i3867_2_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40041 \print_pat/r_addy_5__I_0 ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  LUT4 #("0xC000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40041 ( input A, B, C, D, output Z );

  LUT4 #("0xFA0A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_109 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40042 \myvga/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40043 \myvga/i2982_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  LUT4 #("0xFEEE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_ram_mod_SLICE_110 ( input D1, C1, B1, A1, D0, C0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40044 \print_pat.i2167_2_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40045 \print_pat/ram_mod/r_data_out_0__I_0 ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  LUT4 #("0x5030") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  LUT4 #("0xFA50") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_112 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40046 \gamelogic/i1_4_lut_adj_67 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40047 \gamelogic/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  LUT4 #("0xDCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  LUT4 #("0x0004") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_113 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40048 \gamelogic/i2971_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40049 \gamelogic/i2868_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40049 ( input A, B, C, D, output Z );

  LUT4 #("0xF000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_114 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40050 \print_pat/mux_204_i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40051 \print_pat/i4026_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  LUT4 #("0xE4EE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40051 ( input A, B, C, D, output Z );

  LUT4 #("0xA0C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_117 ( input D1, C1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40052 \print_pat/i204_2_lut_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40053 \print_pat/i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  LUT4 #("0x5000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40053 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF3") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_118 ( input DI1, D1, C1, B1, A1, D0, C0, CE, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40054 \fsm_control/i14_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \print_pat/equal_9_i5_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \fsm_control/result_0__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  LUT4 #("0x5F5C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  LUT4 #("0xFF0F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_119 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40056 \print_pat/i1_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 \print_pat/i1_4_lut_4_lut_adj_77 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  LUT4 #("0xCFDD") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  LUT4 #("0x4540") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_ram_mod_SLICE_121 ( input C1, B1, A1, D0, C0, B0, output F0, 
    F1 );
  wire   GNDI;

  lut40058 \print_pat/i1_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \print_pat/ram_mod/r_data_out_2__I_0 ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  LUT4 #("0xEFEF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  LUT4 #("0xF0CC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_122 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40060 \print_pat/mux_157_i6_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40061 \print_pat/i2154_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  LUT4 #("0xE222") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40061 ( input A, B, C, D, output Z );

  LUT4 #("0xFC0C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_124 ( input D0, C0, B0, A0, output F0 );

  lut40037 \print_pat/mux_158_Mux_3_i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module print_pat_SLICE_125 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40062 \print_pat/i2382_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40063 \print_pat.i1_2_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  LUT4 #("0x5D08") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40063 ( input A, B, C, D, output Z );

  LUT4 #("0xFBEA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_126 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40064 \print_pat/mux_204_i5_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40065 \print_pat/i2156_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  LUT4 #("0xB380") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40065 ( input A, B, C, D, output Z );

  LUT4 #("0xFC30") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_128 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40064 \print_pat/mux_204_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40065 \print_pat/i2158_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module myvga_SLICE_130 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40066 \myvga/i2734_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40053 \myvga/i4040_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  LUT4 #("0xF544") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_131 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40067 \myvga/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40068 \myvga/i4033_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  LUT4 #("0x0020") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40068 ( input A, B, C, D, output Z );

  LUT4 #("0x0C00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_132 ( input D1, C1, B1, A1, D0, B0, output F0, F1 );
  wire   GNDI;

  lut40069 \myvga/i5_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40070 \myvga/equal_5_i15_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  LUT4 #("0xFDFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40070 ( input A, B, C, D, output Z );

  LUT4 #("0xFFCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_134 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40071 \myvga/i1_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40072 \myvga/i4127_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40072 ( input A, B, C, D, output Z );

  LUT4 #("0x0800") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_136 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40073 \myvga/i6_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40049 \myvga/i2935_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_138 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40074 \myvga/i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40075 \myvga/i2_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  LUT4 #("0x4000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40075 ( input A, B, C, D, output Z );

  LUT4 #("0x0300") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_140 ( input D1, C1, B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40076 \myvga/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40077 \myvga/i3877_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  LUT4 #("0xFF7F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  LUT4 #("0xA0A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_142 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40078 \myvga/clk_60hz_I_0 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40079 \myvga/i1_2_lut_adj_74 ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  LUT4 #("0x0004") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40079 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_144 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40080 \myvga/i5_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40081 \myvga/i4_4_lut_adj_75 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  LUT4 #("0xFCFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40081 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFD") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module myvga_SLICE_146 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40082 \myvga/i5_4_lut_adj_76 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40083 \myvga/i1_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  LUT4 #("0x2000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40083 ( input A, B, C, D, output Z );

  LUT4 #("0x0001") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_148 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40084 \controller/i402_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40085 \controller/i322_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  LUT4 #("0xEA00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  LUT4 #("0xFECC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_149 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40086 \controller/i2_4_lut_adj_73 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40087 \controller/i1_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  LUT4 #("0xC080") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40087 ( input A, B, C, D, output Z );

  LUT4 #("0xF000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_151 ( input D1, B1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40088 \controller/i2_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40089 \controller/i1_2_lut_adj_71 ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  LUT4 #("0xCC00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  LUT4 #("0xFAFA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_152 ( input DI1, D1, D0, C0, B0, A0, CLK, output Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40008 \controller.SLICE_152_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40090 \controller/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \controller/shift_6__I_0_2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_153 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40091 \controller.i2327_1_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40092 \controller/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  LUT4 #("0x0001") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40092 ( input A, B, C, D, output Z );

  LUT4 #("0x7BDE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_154 ( input D0, C0, B0, A0, output F0 );

  lut40093 \controller/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40093 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_155 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40094 \controller/i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40095 \controller/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40095 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_157 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40096 \controller/counter_12__I_0 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40097 \controller/i6_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40097 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_160 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40098 \controller/counter_8__I_0 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40099 \controller/i3859_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  LUT4 #("0x0002") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40099 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_162 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40100 \gamelogic/i2400_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40101 \gamelogic/i2921_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  LUT4 #("0x2A00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40101 ( input A, B, C, D, output Z );

  LUT4 #("0xA8A8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_163 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40102 \gamelogic/i2097_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40103 \gamelogic.i45_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  LUT4 #("0xA8A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40103 ( input A, B, C, D, output Z );

  LUT4 #("0x0030") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_164 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40104 \gamelogic/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40087 \gamelogic/i1_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  LUT4 #("0xFF80") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_166 ( input D0, C0, output F0 );
  wire   GNDI;

  lut40105 \gamelogic/i2403_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  LUT4 #("0x00F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_167 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40071 \gamelogic/i1_2_lut_adj_64 ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40106 \gamelogic/i4149_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  LUT4 #("0x0800") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_168 ( input DI1, D1, C1, B1, A1, C0, B0, CLK, output Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40107 \gamelogic/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40108 \gamelogic/i4134_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/dir_1__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  LUT4 #("0x0504") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40108 ( input A, B, C, D, output Z );

  LUT4 #("0x3030") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_170 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40109 \gamelogic/i3_4_lut_adj_70 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40110 \gamelogic/i276_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40110 ( input A, B, C, D, output Z );

  LUT4 #("0x0FF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_172 ( input D1, C1, B1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40111 \gamelogic/i297_2_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40112 \gamelogic/i285_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  LUT4 #("0x3FC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40112 ( input A, B, C, D, output Z );

  LUT4 #("0xC000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_173 ( input D0, C0, B0, A0, output F0 );

  lut40113 \gamelogic/i2961_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40113 ( input A, B, C, D, output Z );

  LUT4 #("0xF8F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_174 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40114 \gamelogic/i2_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40115 \gamelogic/mod_41_i117_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  LUT4 #("0x2000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40115 ( input A, B, C, D, output Z );

  LUT4 #("0x70F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_178 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40116 \gamelogic/i3889_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40117 \gamelogic/i3887_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  LUT4 #("0xFAA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40117 ( input A, B, C, D, output Z );

  LUT4 #("0xE888") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_180 ( input D1, C1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40118 \gamelogic/i3897_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40119 \gamelogic/i1_2_lut_3_lut_adj_63 ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  LUT4 #("0xAAA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40119 ( input A, B, C, D, output Z );

  LUT4 #("0xC000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_182 ( input D0, C0, B0, output F0 );
  wire   GNDI;

  lut40120 \gamelogic/i283_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  LUT4 #("0x3FC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_183 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40121 \gamelogic.i15_2_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40122 \gamelogic.i3312_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  LUT4 #("0x7F80") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40122 ( input A, B, C, D, output Z );

  LUT4 #("0x3C00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_184 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40123 \controller/i4_4_lut_adj_72 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40079 \controller/i3_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_187 ( input DI1, D1, C1, B1, A1, D0, C0, A0, CE, LSR, 
    CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40124 \gamelogic.SLICE_187_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40125 \gamelogic/i3869_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/w_data_1__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40124 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40125 ( input A, B, C, D, output Z );

  LUT4 #("0xA000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_189 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40126 \gamelogic/r_addy_10__I_0 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40127 \gamelogic/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  LUT4 #("0xFC0C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40127 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_190 ( input D0, C0, B0, A0, output F0 );

  lut40128 i2_4_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF6") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_192 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40129 \gamelogic/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40043 i1_2_lut( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_194 ( input D0, C0, B0, output F0 );
  wire   GNDI;

  lut40130 \print_pat/mux_204_i4_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40130 ( input A, B, C, D, output Z );

  LUT4 #("0xF3C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_198 ( input D0, C0, B0, output F0 );
  wire   GNDI;

  lut40130 \print_pat/mux_204_i6_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_199 ( input DI1, D1, C1, B1, A1, D0, C0, B0, CLK, output Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40131 i20_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40132 i21_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \fsm_control/result_1__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  LUT4 #("0xF044") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40132 ( input A, B, C, D, output Z );

  LUT4 #("0xCFC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_202 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CLK, 
    output Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  lut40133 i2425_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40134 \gamelogic/i2404_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \gamelogic/snake_x_2__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  LUT4 #("0xFBF8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40134 ( input A, B, C, D, output Z );

  LUT4 #("0x0800") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_203 ( input D1, C1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40135 \gamelogic/mux_61_i5_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \gamelogic/mux_61_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40135 ( input A, B, C, D, output Z );

  LUT4 #("0xAFA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40136 ( input A, B, C, D, output Z );

  LUT4 #("0xCFC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_206 ( output F0 );
  wire   GNDI;

  lut40137 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module print_pat_SLICE_207 ( input D1, C1, B1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40014 \print_pat/r_addy_7__I_0 ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \print_pat/r_addy_8__I_0 ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module print_pat_SLICE_209 ( input D1, C1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40027 \print_pat/r_addy_4__I_0 ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \print_pat/r_addy_6__I_0 ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module print_pat_SLICE_211 ( input D1, C1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40027 \print_pat/r_addy_2__I_0 ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 \print_pat/r_addy_3__I_0 ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module print_pat_SLICE_213 ( input D1, C1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40027 \print_pat/r_addy_0__I_0 ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \print_pat/r_addy_1__I_0 ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module myvga_SLICE_217 ( input DI1, D1, C1, B1, A1, D0, C0, CLK, output Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40138 \myvga/i2941_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40079 \myvga/i54_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \myvga/vsync_I_62 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  LUT4 #("0xF4B0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_SLICE_218 ( input D0, C0, B0, A0, output F0 );

  lut40139 \controller/i401_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  LUT4 #("0xCCC8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_220 ( input DI1, D1, C1, B1, A1, D0, C0, B0, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40140 \gamelogic/mod_30_i292_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \gamelogic/mux_61_i6_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/counterx_5__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  LUT4 #("0x0842") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_221 ( input DI1, D1, C1, B1, D0, C0, CLK, output Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40126 \gamelogic/r_addy_11__I_0 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40087 \gamelogic/i3847_rep_72_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \print_pat/ram_mod/i259 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module gamelogic_SLICE_222 ( input DI1, D1, C1, B1, A1, D0, C0, B0, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40141 i2431_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 \gamelogic/mux_61_i7_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/snake_y_0__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  LUT4 #("0xFDF8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_223 ( input D1, C1, B1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40142 \gamelogic/mux_61_i9_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \gamelogic/mux_61_i8_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  LUT4 #("0xCFC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_224 ( input D1, C1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40143 \gamelogic/i4132_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40144 \gamelogic/i4130_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  LUT4 #("0x0F00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40144 ( input A, B, C, D, output Z );

  LUT4 #("0x000F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_226 ( input D1, C1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40145 \gamelogic/mux_61_i1_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \gamelogic/i2592_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40145 ( input A, B, C, D, output Z );

  LUT4 #("0xAAF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_228 ( input DI1, D1, C1, B1, A1, D0, C0, A0, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40146 \gamelogic/mod_32_i281_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40147 \gamelogic/mux_61_i11_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/countery_4__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  LUT4 #("0x78F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40147 ( input A, B, C, D, output Z );

  LUT4 #("0xAAF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_230 ( input D0, C0, output F0 );
  wire   GNDI;

  lut40043 \gamelogic/i1_2_lut_adj_68 ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module gamelogic_SLICE_232 ( input DI1, D1, C1, B1, A1, D0, CLK, output Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40148 \gamelogic/i12_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40007 \gamelogic/i258_1_lut ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \gamelogic/w_addr_11__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40148 ( input A, B, C, D, output Z );

  LUT4 #("0xC0AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_234 ( input D1, C1, B1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40149 \gamelogic/i2_3_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40150 \gamelogic/r_addy_9__I_0 ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  LUT4 #("0x0C00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40150 ( input A, B, C, D, output Z );

  LUT4 #("0xF0AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_236 ( input DI1, C1, A1, D0, C0, CE, LSR, CLK, output 
    Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40151 \gamelogic/i2854_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40049 \gamelogic/i2866_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  ffsre2 \gamelogic/dir_0__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40151 ( input A, B, C, D, output Z );

  LUT4 #("0xF5F5") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gamelogic_SLICE_237 ( input D1, C1, B1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40152 \gamelogic/mux_61_i4_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \gamelogic/mux_61_i3_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  LUT4 #("0xFC30") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module fsm_control_SLICE_240 ( input DI1, D1, C1, B1, A1, C0, CLK, output Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40153 i1_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40012 \fsm_control/i1_1_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \fsm_control/s_1__I_0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40153 ( input A, B, C, D, output Z );

  LUT4 #("0xFC44") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module fsm_control_SLICE_241 ( input DI1, D1, C1, B1, A1, D0, C0, CE, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40154 \fsm_control/mux_16_i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40155 \fsm_control/i4153_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \fsm_control/s_0__I_0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40154 ( input A, B, C, D, output Z );

  LUT4 #("0x333A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40155 ( input A, B, C, D, output Z );

  LUT4 #("0x0FFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module rgb_5__I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B rgb_5__I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module IOL_B_B ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "LATCH_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module rgb_0__I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B rgb_0__I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module print_pat_start_draw_screen_row_4__I_0_3 ( input RADDR10, RADDR9, 
    RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, 
    RCLKE, RCLK, RE, WCLKE, output RDATA11, RDATA3 );
  wire   GNDI;

  EBR_B_B \print_pat/start_draw_screen/row_4__I_0_3 ( .RADDR10(RADDR10), 
    .RADDR9(RADDR9), .RADDR8(RADDR8), .RADDR7(RADDR7), .RADDR6(RADDR6), 
    .RADDR5(RADDR5), .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), 
    .RADDR1(RADDR1), .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), 
    .WADDR8(GNDI), .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(GNDI), .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), 
    .RE(RE), .WCLKE(WCLKE), .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), 
    .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), 
    .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B_B ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, 
    RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, 
    WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0x0018041C0C1C081E0A1E0A1E021E061E061E061E060E0606020602120212001A";

    defparam INST10.INIT_1 = "0x000000000000000000000008000C001C041C001E101E101E001E001600120012";

    defparam INST10.INIT_2 = "0x0018041C041E041E041E121E121E021E021E060E060E0602020202120212021A";

    defparam INST10.INIT_3 = "0x000000000000000000000008000D000D081D001F101F101E0016121610121012";

    defparam INST10.INIT_4 = "0x1018181C0C1E0C1E0C1E1C1E1E1E0A1E0A1F040F040F000700030212021A021A";

    defparam INST10.INIT_5 = "0x000000000000000000000009000D080D081F081F141F121F001F10161012101A";

    defparam INST10.INIT_6 = "0x1018181C181E081E1C1E1C1E1D1F0D1F090F0D0F040F000702030213021B021A";

    defparam INST10.INIT_7 = "0x000000000000000000000008000D000D080F050F061F161F121F001F101A101A";

    defparam INST10.INIT_8 = "0x1018101C101E101E1C1E1D1F011F051F0D0F090F010F000702030213021B001B";

    defparam INST10.INIT_9 = "0x000000000000000000000008000C000C000F000F040F021F081F001B001B0018";

    defparam INST10.INIT_A = "0x0018001E181E1A1E1F1F0F1F031F090F0D0F0D0F030F03030003000B000B001B";

    defparam INST10.INIT_B = "0x000000000000000000000004000C000E040E000F000F001F001F031B001B0018";

    defparam INST10.INIT_C = "0x08181C1E1C1E1E1F0F1F0F0F0F0F0E0F0E0F040F020F02030003000900090009";

    defparam INST10.INIT_D = "0x000000000000000000000004040C000E080E000F000F080F080F081B081B0819";

    defparam INST10.INIT_E = "0x081C0C1E0C1E0C0F050F0D0F0F0F0E0F0E0F030F030703030103000900090009";

    defparam INST10.INIT_F = "0x0000000000000000000000040004000E000E000F090F0E0F080F080B080B0819";
endmodule

module print_pat_start_draw_screen_row_4__I_0_4 ( input RADDR10, RADDR9, 
    RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, 
    RCLKE, RCLK, RE, WCLKE, output RDATA11, RDATA3 );
  wire   GNDI;

  EBR_B0156 \print_pat/start_draw_screen/row_4__I_0_4 ( .RADDR10(RADDR10), 
    .RADDR9(RADDR9), .RADDR8(RADDR8), .RADDR7(RADDR7), .RADDR6(RADDR6), 
    .RADDR5(RADDR5), .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), 
    .RADDR1(RADDR1), .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), 
    .WADDR8(GNDI), .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(GNDI), .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), 
    .RE(RE), .WCLKE(WCLKE), .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), 
    .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), 
    .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0156 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0x0018041C0C1C081E0A1E0A1E021E061E061E061E060E0606020602120212001A";

    defparam INST10.INIT_1 = "0x000000000000000000000008000C001C041C001E101E101E001E001600120012";

    defparam INST10.INIT_2 = "0x0018041C041E041E041E121E121E021E021E060E060E0602020202120212021A";

    defparam INST10.INIT_3 = "0x000000000000000000000008000D000D081D001F101F101E0016121610121012";

    defparam INST10.INIT_4 = "0x1018181C0C1E0C1E0C1E1C1E1E1E0A1E0A1F040F040F000700030212021A021A";

    defparam INST10.INIT_5 = "0x000000000000000000000009000D080D081F081F141F121F001F10161012101A";

    defparam INST10.INIT_6 = "0x1018181C181E081E1C1E1C1E1D1F0D1F090F0D0F040F000702030213021B021A";

    defparam INST10.INIT_7 = "0x000000000000000000000008000D000D080F050F061F161F121F001F101A101A";

    defparam INST10.INIT_8 = "0x1018101C101E101E1C1E1D1F011F051F0D0F090F010F000702030213021B001B";

    defparam INST10.INIT_9 = "0x000000000000000000000008000C000C000F000F040F021F081F001B001B0018";

    defparam INST10.INIT_A = "0x0018001E181E1A1E1F1F0F1F031F090F0D0F0D0F030F03030003000B000B001B";

    defparam INST10.INIT_B = "0x000000000000000000000004000C000E040E000F000F001F001F031B001B0018";

    defparam INST10.INIT_C = "0x08181C1E1C1E1E1F0F1F0F0F0F0F0E0F0E0F040F020F02030003000900090009";

    defparam INST10.INIT_D = "0x000000000000000000000004040C000E080E000F000F080F080F081B081B0819";

    defparam INST10.INIT_E = "0x081C0C1E0C1E0C0F050F0D0F0F0F0E0F0E0F030F030703030103000900090009";

    defparam INST10.INIT_F = "0x0000000000000000000000040004000E000E000F090F0E0F080F080B080B0819";
endmodule

module print_pat_start_draw_screen_row_4__I_0_2 ( input RADDR10, RADDR9, 
    RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, 
    RCLKE, RCLK, RE, WCLKE, output RDATA11, RDATA3 );
  wire   GNDI;

  EBR_B0157 \print_pat/start_draw_screen/row_4__I_0_2 ( .RADDR10(RADDR10), 
    .RADDR9(RADDR9), .RADDR8(RADDR8), .RADDR7(RADDR7), .RADDR6(RADDR6), 
    .RADDR5(RADDR5), .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), 
    .RADDR1(RADDR1), .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), 
    .WADDR8(GNDI), .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(GNDI), .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), 
    .RE(RE), .WCLKE(WCLKE), .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), 
    .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), 
    .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0157 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0x0018041C0C1C081E0A1E0A1E021E061E061E061E060E0606020602120212001A";

    defparam INST10.INIT_1 = "0x000000000000000000000008000C001C041C001E101E101E001E001600120012";

    defparam INST10.INIT_2 = "0x0018041C041E041E041E121E121E021E021E060E060E0602020202120212021A";

    defparam INST10.INIT_3 = "0x000000000000000000000008000D000D081D001F101F101E0016121610121012";

    defparam INST10.INIT_4 = "0x1018181C0C1E0C1E0C1E1C1E1E1E0A1E0A1F040F040F000700030212021A021A";

    defparam INST10.INIT_5 = "0x000000000000000000000009000D080D081F081F141F121F001F10161012101A";

    defparam INST10.INIT_6 = "0x1018181C181E081E1C1E1C1E1D1F0D1F090F0D0F040F000702030213021B021A";

    defparam INST10.INIT_7 = "0x000000000000000000000008000D000D080F050F061F161F121F001F101A101A";

    defparam INST10.INIT_8 = "0x1018101C101E101E1C1E1D1F011F051F0D0F090F010F000702030213021B001B";

    defparam INST10.INIT_9 = "0x000000000000000000000008000C000C000F000F040F021F081F001B001B0018";

    defparam INST10.INIT_A = "0x0018001E181E1A1E1F1F0F1F031F090F0D0F0D0F030F03030003000B000B001B";

    defparam INST10.INIT_B = "0x000000000000000000000004000C000E040E000F000F001F001F031B001B0018";

    defparam INST10.INIT_C = "0x08181C1E1C1E1E1F0F1F0F0F0F0F0E0F0E0F040F020F02030003000900090009";

    defparam INST10.INIT_D = "0x000000000000000000000004040C000E080E000F000F080F080F081B081B0819";

    defparam INST10.INIT_E = "0x081C0C1E0C1E0C0F050F0D0F0F0F0E0F0E0F030F030703030103000900090009";

    defparam INST10.INIT_F = "0x0000000000000000000000040004000E000E000F090F0E0F080F080B080B0819";
endmodule

module print_pat_snake_draw_alive_row_0__I_0_2 ( input RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, RCLKE, RCLK, RE, WCLKE, output 
    RDATA10, RDATA8, RDATA6, RDATA4, RDATA2, RDATA0 );
  wire   GNDI;

  EBR_B0158 \print_pat/snake_draw_alive/row_0__I_0_2 ( .RADDR10(GNDI), 
    .RADDR9(GNDI), .RADDR8(GNDI), .RADDR7(RADDR7), .RADDR6(RADDR6), 
    .RADDR5(RADDR5), .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), 
    .RADDR1(RADDR1), .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), 
    .WADDR8(GNDI), .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(GNDI), .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), 
    .RE(RE), .WCLKE(WCLKE), .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(), .RDATA10(RDATA10), .RDATA9(), 
    .RDATA8(RDATA8), .RDATA7(), .RDATA6(RDATA6), .RDATA5(), .RDATA4(RDATA4), 
    .RDATA3(), .RDATA2(RDATA2), .RDATA1(), .RDATA0(RDATA0));
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0158 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "8";
  defparam INST10.DATA_WIDTH_R = "8";

    defparam INST10.INIT_0 = "0x0005000500050005000500050005004400050005000500050005000500050005";

    defparam INST10.INIT_1 = "0x0005000500050005000500440005000500050555055505550555055505550005";

    defparam INST10.INIT_2 = "0x0005004400050005004400440044000500050555055505550555055505550005";

    defparam INST10.INIT_3 = "0x0005000500050005000500440005000500050555055500000000000000000005";

    defparam INST10.INIT_4 = "0x0005000500440005000500050005000500050555055500000000000000000005";

    defparam INST10.INIT_5 = "0x0005000500050005000500050000000000050555055500000000055500000005";

    defparam INST10.INIT_6 = "0x0005000500050005000000050005000500050555055500000000000000000005";

    defparam INST10.INIT_7 = "0x0005050005000500000000050005000500050005000500050005000500050005";

    defparam INST10.INIT_8 = "0x0005050005000500000000050005000500050005000500050005000500050005";

    defparam INST10.INIT_9 = "0x0005000500050005000000050005000500050555055500000000000000000005";

    defparam INST10.INIT_A = "0x0005000500050005000500050000000000050555055500000000055500000005";

    defparam INST10.INIT_B = "0x0005000500050044000500050005000500050555055500000000000000000005";

    defparam INST10.INIT_C = "0x0005000500050005000500440005000500050555055500000000000000000005";

    defparam INST10.INIT_D = "0x0005000500050005004400440044000500050555055505550555055505550005";

    defparam INST10.INIT_E = "0x0005004400050005000500440005000500050555055505550555055505550005";

    defparam INST10.INIT_F = "0x0005000500050005000500050005000500440005000500050005000500050005";
endmodule

module print_pat_ram_mod_mem2 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, 
    RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, 
    WADDR7, WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, 
    RCLK, RE, WCLKE, WCLK, WE, output RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly, 
         WE_dly;

  EBR_B0159 \print_pat/ram_mod/mem2 ( .RADDR10(RADDR10_dly), 
    .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), .RADDR7(RADDR7_dly), 
    .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), .RADDR4(RADDR4_dly), 
    .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), .RADDR1(RADDR1_dly), 
    .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), .WADDR9(WADDR9_dly), 
    .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), .WADDR6(WADDR6_dly), 
    .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), .WADDR3(WADDR3_dly), 
    .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), .WADDR0(WADDR0_dly), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE_dly), 
    .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), .WCLK(WCLK_dly), 
    .WE(WE_dly), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), .RDATA11(), 
    .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), 
    .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $setuphold (posedge WCLK, WE, 0:0:0, 0:0:0,,,, WCLK_dly, WE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0159 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_1 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_2 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_3 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_4 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_5 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_6 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_7 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_8 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_9 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_A = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_B = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_C = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_D = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_E = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_F = "0x0000000000000000000000000000000000000000000000000000000000000000";
endmodule

module print_pat_ram_mod_mem0 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, 
    RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, 
    WADDR7, WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, WDATA11, 
    WDATA3, RCLKE, RCLK, RE, WCLKE, WCLK, WE, output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, WDATA11_dly, WDATA3_dly, 
         RCLKE_dly, RE_dly, WCLKE_dly, WE_dly;

  EBR_B0160 \print_pat/ram_mod/mem0 ( .RADDR10(RADDR10_dly), 
    .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), .RADDR7(RADDR7_dly), 
    .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), .RADDR4(RADDR4_dly), 
    .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), .RADDR1(RADDR1_dly), 
    .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), .WADDR9(WADDR9_dly), 
    .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), .WADDR6(WADDR6_dly), 
    .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), .WADDR3(WADDR3_dly), 
    .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), .WADDR0(WADDR0_dly), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(WDATA11_dly), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(WDATA3_dly), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(WE_dly), .RDATA15(), .RDATA14(), .RDATA13(), 
    .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), 
    .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), 
    .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold 
      (posedge WCLK, WDATA11, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA11_dly);
    $setuphold (posedge WCLK, WDATA3, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA3_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $setuphold (posedge WCLK, WE, 0:0:0, 0:0:0,,,, WCLK_dly, WE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0160 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_1 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_2 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_3 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_4 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_5 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_6 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_7 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_8 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_9 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_A = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_B = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_C = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_D = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_E = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_F = "0x0000000000000000000000000000000000000000000000000000000000000000";
endmodule

module print_pat_ram_mod_mem3 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, 
    RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, 
    WADDR7, WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, 
    RCLK, RE, WCLKE, WCLK, WE, output RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly, 
         WE_dly;

  EBR_B0161 \print_pat/ram_mod/mem3 ( .RADDR10(RADDR10_dly), 
    .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), .RADDR7(RADDR7_dly), 
    .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), .RADDR4(RADDR4_dly), 
    .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), .RADDR1(RADDR1_dly), 
    .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), .WADDR9(WADDR9_dly), 
    .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), .WADDR6(WADDR6_dly), 
    .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), .WADDR3(WADDR3_dly), 
    .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), .WADDR0(WADDR0_dly), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE_dly), 
    .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), .WCLK(WCLK_dly), 
    .WE(WE_dly), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), .RDATA11(), 
    .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), 
    .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $setuphold (posedge WCLK, WE, 0:0:0, 0:0:0,,,, WCLK_dly, WE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0161 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_1 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_2 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_3 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_4 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_5 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_6 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_7 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_8 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_9 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_A = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_B = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_C = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_D = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_E = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_F = "0x0000000000000000000000000000000000000000000000000000000000000000";
endmodule

module print_pat_ram_mod_mem1 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, 
    RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, 
    WADDR7, WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, WDATA11, 
    WDATA3, RCLKE, RCLK, RE, WCLKE, WCLK, WE, output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, WDATA11_dly, WDATA3_dly, 
         RCLKE_dly, RE_dly, WCLKE_dly, WE_dly;

  EBR_B0162 \print_pat/ram_mod/mem1 ( .RADDR10(RADDR10_dly), 
    .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), .RADDR7(RADDR7_dly), 
    .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), .RADDR4(RADDR4_dly), 
    .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), .RADDR1(RADDR1_dly), 
    .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), .WADDR9(WADDR9_dly), 
    .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), .WADDR6(WADDR6_dly), 
    .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), .WADDR3(WADDR3_dly), 
    .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), .WADDR0(WADDR0_dly), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(WDATA11_dly), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(WDATA3_dly), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(WE_dly), .RDATA15(), .RDATA14(), .RDATA13(), 
    .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), 
    .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), 
    .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold 
      (posedge WCLK, WDATA11, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA11_dly);
    $setuphold (posedge WCLK, WDATA3, 0:0:0, 0:0:0,,,, WCLK_dly, WDATA3_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $setuphold (posedge WCLK, WE, 0:0:0, 0:0:0,,,, WCLK_dly, WE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0162 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_1 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_2 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_3 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_4 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_5 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_6 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_7 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_8 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_9 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_A = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_B = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_C = "0x0000000000000000000000000000000800000000000000000000000000000000";

    defparam INST10.INIT_D = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_E = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_F = "0x0000000000000000000000000000000000000000000000000000000000000000";
endmodule

module print_pat_end_game_rom_screen_row_4__I_0_6 ( input RADDR10, RADDR9, 
    RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, 
    RCLKE, RCLK, RE, WCLKE, output RDATA11, RDATA3 );
  wire   GNDI;

  EBR_B0163 \print_pat/end_game_rom_screen/row_4__I_0_6 ( .RADDR10(RADDR10), 
    .RADDR9(RADDR9), .RADDR8(RADDR8), .RADDR7(RADDR7), .RADDR6(RADDR6), 
    .RADDR5(RADDR5), .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), 
    .RADDR1(RADDR1), .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), 
    .WADDR8(GNDI), .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(GNDI), .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), 
    .RE(RE), .WCLKE(WCLKE), .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), 
    .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), 
    .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0163 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0xFCFCE0E0E0E0F6F6F6F6F6F6EEEEFEFEFEFEFEFEFEFEE2E2E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_1 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F8F8F8F8FCFCFCFCFCFCFCFCFCFCFCFC";

    defparam INST10.INIT_2 = "0xF8F8E0E0E0E0F0F0FCFCEEEEEEEEFEFEFEFEEEEEFAFAFAFAE0E0E0E0E0E0E0E0";

    defparam INST10.INIT_3 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8E8E8F4F4FCFCFCFCF4F4ECECF8F8";

    defparam INST10.INIT_4 = "0xF8F8E0E0E0E0F0F0F8F8F8F8E8E8F8F8F8F8F8F8F8F8F8F8E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_5 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8F8F8F0F0FCFCFCFCF4F4F4F4FCFC";

    defparam INST10.INIT_6 = "0xFCFCE0E0E0E0E2E2F2F2F2F2E6E6EEEEFFFFF9F9F8F8E0E0E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_7 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F8F8F8F8F0F0E8E8FAFAF6F6F6F6FEFE";

    defparam INST10.INIT_8 = "0xE4E4E0E0E0E0E3E3E7E7E7E7E6E6E7E7E7E7E7E7E5E5E5E5E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_9 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0E0E0E2E2F0F0F0F0F6F6";

    defparam INST10.INIT_A = "0xE0E0E0E0E0E0E1E1E7E7E7E7E6E6E7E7E7E7E7E7E7E7E5E5E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_B = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0E4E4E4E4E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_C = "0xE0E0E1E1E0E0E1E1E3E3EAEAEEEEEDEDEFEFE7E7E6E6E5E5E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_D = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8ECECECECECECEEECEEEEEEEEEAE2";

    defparam INST10.INIT_E = "0xEBEAE1E0E0E0E3E3EBEBEFEFEEEEEEEEEFEFEFEFEFEFE1E1E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_F = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0ECECECECEEEEEEEEEEEEEEEEEEEEEEEE";
endmodule

module print_pat_end_game_rom_screen_row_4__I_0 ( input RADDR10, RADDR9, 
    RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, 
    RCLKE, RCLK, RE, WCLKE, output RDATA11, RDATA3 );
  wire   GNDI;

  EBR_B0164 \print_pat/end_game_rom_screen/row_4__I_0 ( .RADDR10(RADDR10), 
    .RADDR9(RADDR9), .RADDR8(RADDR8), .RADDR7(RADDR7), .RADDR6(RADDR6), 
    .RADDR5(RADDR5), .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), 
    .RADDR1(RADDR1), .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), 
    .WADDR8(GNDI), .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(GNDI), .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), 
    .RE(RE), .WCLKE(WCLKE), .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), 
    .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), 
    .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0164 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0xFCFCE0E0E0E0F6F6F6F6F6F6EEEEFEFEFEFEFEFEFEFEE2E2E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_1 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F8F8F8F8FCFCFCFCFCFCFCFCFCFCFCFC";

    defparam INST10.INIT_2 = "0xF8F8E0E0E0E0F0F0FCFCEEEEEEEEFEFEFEFEEEEEFAFAFAFAE0E0E0E0E0E0E0E0";

    defparam INST10.INIT_3 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8E8E8F4F4FCFCFCFCF4F4ECECF8F8";

    defparam INST10.INIT_4 = "0xF8F8E0E0E0E0F0F0F8F8F8F8E8E8F8F8F8F8F8F8F8F8F8F8E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_5 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8F8F8F0F0FCFCFCFCF4F4F4F4FCFC";

    defparam INST10.INIT_6 = "0xFCFCE0E0E0E0E2E2F2F2F2F2E6E6EEEEFFFFF9F9F8F8E0E0E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_7 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F8F8F8F8F0F0E8E8FAFAF6F6F6F6FEFE";

    defparam INST10.INIT_8 = "0xE4E4E0E0E0E0E3E3E7E7E7E7E6E6E7E7E7E7E7E7E5E5E5E5E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_9 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0E0E0E2E2F0F0F0F0F6F6";

    defparam INST10.INIT_A = "0xE0E0E0E0E0E0E1E1E7E7E7E7E6E6E7E7E7E7E7E7E7E7E5E5E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_B = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0E4E4E4E4E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_C = "0xE0E0E1E1E0E0E1E1E3E3EAEAEEEEEDEDEFEFE7E7E6E6E5E5E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_D = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8ECECECECECECEEECEEEEEEEEEAE2";

    defparam INST10.INIT_E = "0xEBEAE1E0E0E0E3E3EBEBEFEFEEEEEEEEEFEFEFEFEFEFE1E1E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_F = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0ECECECECEEEEEEEEEEEEEEEEEEEEEEEE";
endmodule

module print_pat_end_game_rom_screen_row_4__I_0_5 ( input RADDR10, RADDR9, 
    RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, 
    RCLKE, RCLK, RE, WCLKE, output RDATA11, RDATA3 );
  wire   GNDI;

  EBR_B0165 \print_pat/end_game_rom_screen/row_4__I_0_5 ( .RADDR10(RADDR10), 
    .RADDR9(RADDR9), .RADDR8(RADDR8), .RADDR7(RADDR7), .RADDR6(RADDR6), 
    .RADDR5(RADDR5), .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), 
    .RADDR1(RADDR1), .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), 
    .WADDR8(GNDI), .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), 
    .WADDR3(GNDI), .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), 
    .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), 
    .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), 
    .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), 
    .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), 
    .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), 
    .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), 
    .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), 
    .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), 
    .RE(RE), .WCLKE(WCLKE), .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), 
    .RDATA13(), .RDATA12(), .RDATA11(RDATA11), .RDATA10(), .RDATA9(), 
    .RDATA8(), .RDATA7(), .RDATA6(), .RDATA5(), .RDATA4(), .RDATA3(RDATA3), 
    .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0165 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "2";
  defparam INST10.DATA_WIDTH_R = "2";

    defparam INST10.INIT_0 = "0xFCFCE0E0E0E0F6F6F6F6F6F6EEEEFEFEFEFEFEFEFEFEE2E2E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_1 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F8F8FAFAFEFEFEFEFEFEFEFEFEFEFCFC";

    defparam INST10.INIT_2 = "0xFAFAE0E0E0E0F0F0FCFCEEEEEEEEFEFEFEFEEEEEFAFAFAFAE0E0E0E0E0E0E0E0";

    defparam INST10.INIT_3 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8EAEAF6F6FEFEFEFEF6F6EEEEFAFA";

    defparam INST10.INIT_4 = "0xFAFAE0E0E0E0F0F0F8F8F8F8E8E8F8F8F8F8F8F8F8F8F8F8E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_5 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8FAFAF2F2FEFEFEFEF6F6F6F6FEFE";

    defparam INST10.INIT_6 = "0xFEFEE0E0E0E0E2E2F2F2F2F2E6E6EEEEFFFFF9F9F8F8E0E0E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_7 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F8F8F8F8F2F2EAEAFAFAF7F7F7F6FEFE";

    defparam INST10.INIT_8 = "0xE7E7E0E0E0E0E3E3E7E7E7E7E6E6E7E7E7E7E7E7E5E5E5E5E0E0E0E0E0E0E0E0";

    defparam INST10.INIT_9 = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F1F1E3E3E3E3F1F1F1F1F7F7";

    defparam INST10.INIT_A = "0xE1E1E0E0E0E0E1E1E7E7E7E7E6E6E7E7E7E7E7E7E7E7E5E5E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_B = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0F0F0F1F1E5E5E5E5E1E1E1E1E1E1E1E1";

    defparam INST10.INIT_C = "0xE1E1E0E1E0E0E1E1E3E3EAEAEEEEEDEDEFEFE7E7E6E6E5E5E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_D = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0E8E8EDEDEDEDEDEDEFEDEFEFEFEFEBE3";

    defparam INST10.INIT_E = "0xEAEBE0E1E0E0E3E3EBEBEFEFEEEEEEEEEFEFEFEFEFEFE1E1E1E1E0E0E0E0E0E0";

    defparam INST10.INIT_F = "0xFFFFFFFFE0E0E0E0E0E0E0E0E0E0E0E0ECECEDEDEFEFEFEFEFEFEFEFEFEFEFEF";
endmodule

module print_pat_apple_draw_row_0__I_0 ( input RADDR7, RADDR6, RADDR5, RADDR4, 
    RADDR3, RADDR2, RADDR1, RADDR0, RCLKE, RCLK, RE, WCLKE, output RDATA10, 
    RDATA8, RDATA6, RDATA4, RDATA2, RDATA0 );
  wire   GNDI;

  EBR_B0166 \print_pat/apple_draw/row_0__I_0 ( .RADDR10(GNDI), .RADDR9(GNDI), 
    .RADDR8(GNDI), .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), 
    .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), 
    .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), .WADDR8(GNDI), 
    .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), .WADDR3(GNDI), 
    .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), .MASK_N15(GNDI), 
    .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), .MASK_N11(GNDI), 
    .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), .MASK_N7(GNDI), 
    .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), .MASK_N3(GNDI), 
    .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), .WDATA15(GNDI), 
    .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), .WDATA11(GNDI), 
    .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), 
    .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), 
    .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(), .RDATA10(RDATA10), .RDATA9(), .RDATA8(RDATA8), .RDATA7(), 
    .RDATA6(RDATA6), .RDATA5(), .RDATA4(RDATA4), .RDATA3(), .RDATA2(RDATA2), 
    .RDATA1(), .RDATA0(RDATA0));
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0166 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "8";
  defparam INST10.DATA_WIDTH_R = "8";

    defparam INST10.INIT_0 = "0x0500050005000500050005000500050005000500050005000500050005000500";

    defparam INST10.INIT_1 = "0x0500050005000500050005000500050005000500050005000500050005000500";

    defparam INST10.INIT_2 = "0x0500050005000500050005000500050005000500050005000500050005000500";

    defparam INST10.INIT_3 = "0x0500050005000500050005000500050005000500050005000500050005000500";

    defparam INST10.INIT_4 = "0x0400050005000500050005000500050005000500050005000500001100110500";

    defparam INST10.INIT_5 = "0x0400050005000500050005000500050005000500050005000011001100110500";

    defparam INST10.INIT_6 = "0x0400050005000500050005000500050005000500050005000011001105000500";

    defparam INST10.INIT_7 = "0x0400050005000500050005000500050005000500050005000400040004000400";

    defparam INST10.INIT_8 = "0x0400040005000500050005000500050005000500050005000100010004000400";

    defparam INST10.INIT_9 = "0x0400040005000500050005000500050005000500050005000500050005000500";

    defparam INST10.INIT_A = "0x0400040004000500050005000500050005000500050005000500050005000500";

    defparam INST10.INIT_B = "0x0400040004000400050005000500050005000500050005000500050005000500";

    defparam INST10.INIT_C = "0x0400040004000400040005000500050005000500050005000500050005000500";

    defparam INST10.INIT_D = "0x0400040004000400040004000500050005000500050005000500050005000500";

    defparam INST10.INIT_E = "0x0400040004000400040004000400050005000500050005000500050005000500";

    defparam INST10.INIT_F = "0x0400040004000400040004000400040005000500050005000500050005000500";
endmodule

module pll_lscc_pll_inst_u_PLL_B ( input REFERENCECLK, FEEDBACK, RESET_N, 
    output INTFBOUT, OUTGLOBAL );
  wire   GNDI;

  PLL_B_B \pll/lscc_pll_inst/u_PLL_B ( .REFERENCECLK(REFERENCECLK), 
    .FEEDBACK(FEEDBACK), .DYNAMICDELAY7(GNDI), .DYNAMICDELAY6(GNDI), 
    .DYNAMICDELAY5(GNDI), .DYNAMICDELAY4(GNDI), .DYNAMICDELAY3(GNDI), 
    .DYNAMICDELAY2(GNDI), .DYNAMICDELAY1(GNDI), .DYNAMICDELAY0(GNDI), 
    .BYPASS(GNDI), .RESET_N(RESET_N), .SCLK(GNDI), .SDI(GNDI), .LATCH(GNDI), 
    .INTFBOUT(INTFBOUT), .OUTCORE(), .OUTGLOBAL(OUTGLOBAL), .OUTCOREB(), 
    .OUTGLOBALB(), .SDO(), .LOCK());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (REFERENCECLK => OUTGLOBAL) = (0:0:0,0:0:0);
  endspecify

endmodule

module PLL_B_B ( input REFERENCECLK, FEEDBACK, DYNAMICDELAY7, DYNAMICDELAY6, 
    DYNAMICDELAY5, DYNAMICDELAY4, DYNAMICDELAY3, DYNAMICDELAY2, DYNAMICDELAY1, 
    DYNAMICDELAY0, BYPASS, RESET_N, SCLK, SDI, LATCH, output INTFBOUT, OUTCORE, 
    OUTGLOBAL, OUTCOREB, OUTGLOBALB, SDO, LOCK );

  PLL_B INST10( .REFERENCECLK(REFERENCECLK), .FEEDBACK(FEEDBACK), 
    .DYNAMICDELAY7(DYNAMICDELAY7), .DYNAMICDELAY6(DYNAMICDELAY6), 
    .DYNAMICDELAY5(DYNAMICDELAY5), .DYNAMICDELAY4(DYNAMICDELAY4), 
    .DYNAMICDELAY3(DYNAMICDELAY3), .DYNAMICDELAY2(DYNAMICDELAY2), 
    .DYNAMICDELAY1(DYNAMICDELAY1), .DYNAMICDELAY0(DYNAMICDELAY0), 
    .BYPASS(BYPASS), .RESET_N(RESET_N), .SCLK(SCLK), .SDI(SDI), .LATCH(LATCH), 
    .INTFBOUT(INTFBOUT), .OUTCORE(OUTCORE), .OUTGLOBAL(OUTGLOBAL), 
    .OUTCOREB(OUTCOREB), .OUTGLOBALB(OUTGLOBALB), .SDO(SDO), .LOCK(LOCK));
  defparam INST10.FEEDBACK_PATH = "SIMPLE";
  defparam INST10.DELAY_ADJUSTMENT_MODE_FEEDBACK = "FIXED";
  defparam INST10.FDA_FEEDBACK = "0";
  defparam INST10.DELAY_ADJUSTMENT_MODE_RELATIVE = "FIXED";
  defparam INST10.FDA_RELATIVE = "0";
  defparam INST10.SHIFTREG_DIV_MODE = "0";
  defparam INST10.PLLOUT_SELECT_PORTA = "GENCLK";
  defparam INST10.PLLOUT_SELECT_PORTB = "GENCLK";
  defparam INST10.DIVR = "0";
  defparam INST10.DIVF = "66";
  defparam INST10.DIVQ = "5";
  defparam INST10.FILTER_RANGE = "1";
  defparam INST10.ENABLE_ICEGATE_PORTA = "0";
  defparam INST10.ENABLE_ICEGATE_PORTB = "0";
  defparam INST10.TEST_MODE = "0";
  defparam INST10.EXTERNAL_DIVIDE_FACTOR = "NONE";
  defparam INST10.FREQUENCY_PIN_REFERENCECLK = "12.000000";
endmodule

module rgb_1__I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B rgb_1__I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module rgb_2__I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B rgb_2__I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module rgb_3__I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B rgb_3__I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module rgb_4__I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B rgb_4__I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module hsync_I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B hsync_I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module controller_data_c_I_0 ( input PADDI, INCLK, output DI0 );
  wire   GNDI, VCCI, PADDI_dly, INCLK_dly;

  IOL_B0167 \controller/data_c_I_0 ( .PADDI(PADDI_dly), .DO1(GNDI), .DO0(GNDI), 
    .CE(VCCI), .IOLTO(GNDI), .HOLD(GNDI), .INCLK(INCLK_dly), .OUTCLK(GNDI), 
    .PADDO(), .PADDT(), .DI1(), .DI0(DI0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (INCLK => DI0) = (0:0:0,0:0:0);
    $setuphold (posedge INCLK, PADDI, 0:0:0, 0:0:0,,,, INCLK_dly, PADDI_dly);
  endspecify

endmodule

module IOL_B0167 ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "NONE_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module gamelogic_counter_0__I_0 ( input RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, 
    RCLKE, RCLK, RE, WCLKE, output RDATA8, RDATA6, RDATA4, RDATA2, RDATA0 );
  wire   GNDI;

  EBR_B0168 \gamelogic/counter_0__I_0 ( .RADDR10(GNDI), .RADDR9(GNDI), 
    .RADDR8(GNDI), .RADDR7(GNDI), .RADDR6(GNDI), .RADDR5(GNDI), 
    .RADDR4(RADDR4), .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), 
    .RADDR0(RADDR0), .WADDR10(GNDI), .WADDR9(GNDI), .WADDR8(GNDI), 
    .WADDR7(GNDI), .WADDR6(GNDI), .WADDR5(GNDI), .WADDR4(GNDI), .WADDR3(GNDI), 
    .WADDR2(GNDI), .WADDR1(GNDI), .WADDR0(GNDI), .MASK_N15(GNDI), 
    .MASK_N14(GNDI), .MASK_N13(GNDI), .MASK_N12(GNDI), .MASK_N11(GNDI), 
    .MASK_N10(GNDI), .MASK_N9(GNDI), .MASK_N8(GNDI), .MASK_N7(GNDI), 
    .MASK_N6(GNDI), .MASK_N5(GNDI), .MASK_N4(GNDI), .MASK_N3(GNDI), 
    .MASK_N2(GNDI), .MASK_N1(GNDI), .MASK_N0(GNDI), .WDATA15(GNDI), 
    .WDATA14(GNDI), .WDATA13(GNDI), .WDATA12(GNDI), .WDATA11(GNDI), 
    .WDATA10(GNDI), .WDATA9(GNDI), .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), 
    .WDATA5(GNDI), .WDATA4(GNDI), .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), 
    .WDATA0(GNDI), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(GNDI), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(), .RDATA10(), .RDATA9(), .RDATA8(RDATA8), .RDATA7(), 
    .RDATA6(RDATA6), .RDATA5(), .RDATA4(RDATA4), .RDATA3(), .RDATA2(RDATA2), 
    .RDATA1(), .RDATA0(RDATA0));
  gnd DRIVEGND( .PWR0(GNDI));
endmodule

module EBR_B0168 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_W = "8";
  defparam INST10.DATA_WIDTH_R = "8";

    defparam INST10.INIT_0 = "0x0100005500540051005000450044004100400015001400110010000500040001";

    defparam INST10.INIT_1 = "0x0000015501540151015001450144014101400115011401110110010501040101";

    defparam INST10.INIT_2 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_3 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_4 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_5 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_6 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_7 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_8 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_9 = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_A = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_B = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_C = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_D = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_E = "0x0000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INIT_F = "0x0000000000000000000000000000000000000000000000000000000000000000";
endmodule

module vsync_I_0 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B vsync_I_0( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module data ( output PADDI, input data );
  wire   GNDI;

  BB_B_B \data_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(data));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (data => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module BB_B_B ( input T_N, I, output O, inout B );

  BB_B INST10( .T_N(T_N), .I(I), .O(O), .B(B));
endmodule

module clk_in_12m ( output PADDI, input clk_in_12m );
  wire   GNDI;

  BB_B_B \clk_in_12m_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), 
    .B(clk_in_12m));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (clk_in_12m => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module clock ( input PADDO, output clock );
  wire   VCCI;

  BB_B_B \clock_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(clock));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => clock) = (0:0:0,0:0:0);
  endspecify

endmodule

module latch ( input PADDO, output latch );
  wire   VCCI;

  BB_B_B \latch_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(latch));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => latch) = (0:0:0,0:0:0);
  endspecify

endmodule

module rgb_out_0_ ( input PADDO, output rgbout0 );
  wire   VCCI;

  BB_B_B \rgb_out_pad[0].bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(rgbout0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => rgbout0) = (0:0:0,0:0:0);
  endspecify

endmodule

module rgb_out_1_ ( input PADDO, output rgbout1 );
  wire   VCCI;

  BB_B_B \rgb_out_pad[1].bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(rgbout1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => rgbout1) = (0:0:0,0:0:0);
  endspecify

endmodule

module rgb_out_2_ ( input PADDO, output rgbout2 );
  wire   VCCI;

  BB_B_B \rgb_out_pad[2].bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(rgbout2));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => rgbout2) = (0:0:0,0:0:0);
  endspecify

endmodule

module rgb_out_3_ ( input PADDO, output rgbout3 );
  wire   VCCI;

  BB_B_B \rgb_out_pad[3].bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(rgbout3));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => rgbout3) = (0:0:0,0:0:0);
  endspecify

endmodule

module rgb_out_4_ ( input PADDO, output rgbout4 );
  wire   VCCI;

  BB_B_B \rgb_out_pad[4].bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(rgbout4));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => rgbout4) = (0:0:0,0:0:0);
  endspecify

endmodule

module rgb_out_5_ ( input PADDO, output rgbout5 );
  wire   VCCI;

  BB_B_B \rgb_out_pad[5].bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(rgbout5));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => rgbout5) = (0:0:0,0:0:0);
  endspecify

endmodule

module VSYNC_out ( input PADDO, output VSYNC_out );
  wire   VCCI;

  BB_B_B \VSYNC_out_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(VSYNC_out));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => VSYNC_out) = (0:0:0,0:0:0);
  endspecify

endmodule

module HSYNC_out ( input PADDO, output HSYNC_out );
  wire   VCCI;

  BB_B_B \HSYNC_out_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(HSYNC_out));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => HSYNC_out) = (0:0:0,0:0:0);
  endspecify

endmodule
